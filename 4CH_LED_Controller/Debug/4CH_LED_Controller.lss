
4CH_LED_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  00000e92  00000f26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d6  00800222  00800222  00001048  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002beb  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001441  00000000  00000000  00003f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000198b  00000000  00000000  0000539c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c0  00000000  00000000  00006d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba6  00000000  00000000  000073e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c5d  00000000  00000000  00007f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00009beb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_18>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_20>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_21>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  60:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_24>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  9c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_39>
  a0:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_40>
  a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d8 e0       	ldi	r29, 0x08	; 8
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	12 e0       	ldi	r17, 0x02	; 2
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	e2 e9       	ldi	r30, 0x92	; 146
 122:	fe e0       	ldi	r31, 0x0E	; 14
 124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
 126:	05 90       	lpm	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	a2 32       	cpi	r26, 0x22	; 34
 12c:	b1 07       	cpc	r27, r17
 12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
 130:	22 e0       	ldi	r18, 0x02	; 2
 132:	a2 e2       	ldi	r26, 0x22	; 34
 134:	b2 e0       	ldi	r27, 0x02	; 2
 136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
 138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
 13a:	a8 3f       	cpi	r26, 0xF8	; 248
 13c:	b2 07       	cpc	r27, r18
 13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
 140:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <main>
 144:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <_exit>

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <__vector_21>:
void adc_pin_enable(uint8_t pin){
	DIDR0 |= 1 << pin;
}

void adc_pin_disable(uint8_t pin){
	DIDR0 &= ~(1 << pin);
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <adc_init>:
 16a:	ec e7       	ldi	r30, 0x7C	; 124
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	8f 68       	ori	r24, 0x8F	; 143
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <adc_pin_select>:
}

void adc_pin_select(uint8_t souce){
	ADMUX &= 0xF0;
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 81       	ld	r25, Z
 186:	90 7f       	andi	r25, 0xF0	; 240
 188:	90 83       	st	Z, r25
	ADMUX |= souce;
 18a:	90 81       	ld	r25, Z
 18c:	89 2b       	or	r24, r25
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret

00000192 <adc_convert>:
}


uint16_t adc_convert(void){
	ADCSRA |= 1 << ADEN;
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	80 83       	st	Z, r24
	uint8_t adcl = 0;
	uint8_t adch = 0;
	
	adc_convert_done = 0;
 19c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	ADCSRA |= 1 << ADSC;
 1a0:	80 81       	ld	r24, Z
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	80 83       	st	Z, r24
	while(adc_convert_done == 0);
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	88 23       	and	r24, r24
 1ac:	e1 f3       	breq	.-8      	; 0x1a6 <adc_convert+0x14>
	
	adcl = ADCL;
 1ae:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	adch = ADCH;
 1b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	ADCSRA &=~ (1 << ADEN);
 1b6:	ea e7       	ldi	r30, 0x7A	; 122
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	90 81       	ld	r25, Z
 1bc:	9f 77       	andi	r25, 0x7F	; 127
 1be:	90 83       	st	Z, r25
	return (adch << 8 | adcl);
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	98 2f       	mov	r25, r24
 1c4:	88 27       	eor	r24, r24
	
	
}
 1c6:	82 2b       	or	r24, r18
 1c8:	08 95       	ret

000001ca <get_adc>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
 1ca:	0e 94 c0 00 	call	0x180	; 0x180 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
 1ce:	0e 94 c9 00 	call	0x192	; 0x192 <adc_convert>
}
 1d2:	08 95       	ret

000001d4 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
	adc_pin_select(source);
 1d4:	0e 94 c0 00 	call	0x180	; 0x180 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
 1d8:	0e 94 c9 00 	call	0x192	; 0x192 <adc_convert>
 1dc:	bc 01       	movw	r22, r24
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatunsisf>
 1e6:	2c e6       	ldi	r18, 0x6C	; 108
 1e8:	3b ed       	ldi	r19, 0xDB	; 219
 1ea:	4e e0       	ldi	r20, 0x0E	; 14
 1ec:	52 e4       	ldi	r21, 0x42	; 66
 1ee:	0e 94 83 06 	call	0xd06	; 0xd06 <__mulsf3>
 1f2:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
}
 1f6:	cb 01       	movw	r24, r22
 1f8:	08 95       	ret

000001fa <get_mAmps>:

uint16_t get_mAmps(uint8_t source){
	adc_pin_select(source);
 1fa:	0e 94 c0 00 	call	0x180	; 0x180 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_AMPS(adc_convert());
 1fe:	0e 94 c9 00 	call	0x192	; 0x192 <adc_convert>
 202:	bc 01       	movw	r22, r24
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatunsisf>
 20c:	2c ea       	ldi	r18, 0xAC	; 172
 20e:	32 ee       	ldi	r19, 0xE2	; 226
 210:	4b ec       	ldi	r20, 0xCB	; 203
 212:	50 e4       	ldi	r21, 0x40	; 64
 214:	0e 94 83 06 	call	0xd06	; 0xd06 <__mulsf3>
 218:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
}
 21c:	cb 01       	movw	r24, r22
 21e:	08 95       	ret

00000220 <ADCtoCelsius>:

int16_t getNTC(uint8_t thermalZone){
	return ADCtoCelsius(get_adc(thermalZone));
}

int16_t ADCtoCelsius(uint16_t adcValue) {
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29

	float R2 = R1 / ((ADCResolution - adcValue) / (float)adcValue);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	74 e0       	ldi	r23, 0x04	; 4
 230:	eb 01       	movw	r28, r22
 232:	c8 1b       	sub	r28, r24
 234:	d9 0b       	sbc	r29, r25
 236:	bc 01       	movw	r22, r24
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatunsisf>
 240:	6b 01       	movw	r12, r22
 242:	7c 01       	movw	r14, r24
 244:	be 01       	movw	r22, r28
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatunsisf>
 24e:	a7 01       	movw	r20, r14
 250:	96 01       	movw	r18, r12
 252:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divsf3>
 256:	9b 01       	movw	r18, r22
 258:	ac 01       	movw	r20, r24
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	70 e4       	ldi	r23, 0x40	; 64
 25e:	8c e1       	ldi	r24, 0x1C	; 28
 260:	96 e4       	ldi	r25, 0x46	; 70
 262:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divsf3>
	float temp = 1.0 / ((log(R2 / R1) / 3950.0) + (1.0 / 298.15)) - 273.15;
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e4       	ldi	r19, 0x40	; 64
 26a:	4c e1       	ldi	r20, 0x1C	; 28
 26c:	56 e4       	ldi	r21, 0x46	; 70
 26e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divsf3>
 272:	0e 94 3b 06 	call	0xc76	; 0xc76 <log>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 ee       	ldi	r19, 0xE0	; 224
 27a:	46 e7       	ldi	r20, 0x76	; 118
 27c:	55 e4       	ldi	r21, 0x45	; 69
 27e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divsf3>
 282:	2f e0       	ldi	r18, 0x0F	; 15
 284:	3f ec       	ldi	r19, 0xCF	; 207
 286:	4b e5       	ldi	r20, 0x5B	; 91
 288:	5b e3       	ldi	r21, 0x3B	; 59
 28a:	0e 94 91 04 	call	0x922	; 0x922 <__addsf3>
 28e:	9b 01       	movw	r18, r22
 290:	ac 01       	movw	r20, r24
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	9f e3       	ldi	r25, 0x3F	; 63
 29a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divsf3>
 29e:	23 e3       	ldi	r18, 0x33	; 51
 2a0:	33 e9       	ldi	r19, 0x93	; 147
 2a2:	48 e8       	ldi	r20, 0x88	; 136
 2a4:	53 e4       	ldi	r21, 0x43	; 67
 2a6:	0e 94 90 04 	call	0x920	; 0x920 <__subsf3>
	return (int16_t)(temp * 10);
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e2       	ldi	r20, 0x20	; 32
 2b0:	51 e4       	ldi	r21, 0x41	; 65
 2b2:	0e 94 83 06 	call	0xd06	; 0xd06 <__mulsf3>
 2b6:	0e 94 6f 05 	call	0xade	; 0xade <__fixsfsi>
 2ba:	cb 01       	movw	r24, r22
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	08 95       	ret

000002ca <getNTC>:
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_AMPS(adc_convert());
}

int16_t getNTC(uint8_t thermalZone){
	return ADCtoCelsius(get_adc(thermalZone));
 2ca:	0e 94 e5 00 	call	0x1ca	; 0x1ca <get_adc>
 2ce:	0e 94 10 01 	call	0x220	; 0x220 <ADCtoCelsius>
}
 2d2:	08 95       	ret

000002d4 <gpio_set_pin_level>:

}


void gpio_set_port_level(gpio *GPIOx, const uint8_t mask){
	*GPIOx->port=mask;
 2d4:	66 23       	and	r22, r22
 2d6:	99 f0       	breq	.+38     	; 0x2fe <gpio_set_pin_level+0x2a>
 2d8:	dc 01       	movw	r26, r24
 2da:	ed 91       	ld	r30, X+
 2dc:	fc 91       	ld	r31, X
 2de:	11 97       	sbiw	r26, 0x01	; 1
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	a9 01       	movw	r20, r18
 2e6:	12 96       	adiw	r26, 0x02	; 2
 2e8:	0c 90       	ld	r0, X
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <gpio_set_pin_level+0x1c>
 2ec:	44 0f       	add	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <gpio_set_pin_level+0x18>
 2f4:	ca 01       	movw	r24, r20
 2f6:	90 81       	ld	r25, Z
 2f8:	89 2b       	or	r24, r25
 2fa:	80 83       	st	Z, r24
 2fc:	08 95       	ret
 2fe:	dc 01       	movw	r26, r24
 300:	ed 91       	ld	r30, X+
 302:	fc 91       	ld	r31, X
 304:	11 97       	sbiw	r26, 0x01	; 1
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	a9 01       	movw	r20, r18
 30c:	12 96       	adiw	r26, 0x02	; 2
 30e:	0c 90       	ld	r0, X
 310:	02 c0       	rjmp	.+4      	; 0x316 <gpio_set_pin_level+0x42>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <gpio_set_pin_level+0x3e>
 31a:	ca 01       	movw	r24, r20
 31c:	80 95       	com	r24
 31e:	90 81       	ld	r25, Z
 320:	89 23       	and	r24, r25
 322:	80 83       	st	Z, r24
 324:	08 95       	ret

00000326 <gpio_set_pin_direction>:
 326:	fc 01       	movw	r30, r24
 328:	30 81       	ld	r19, Z
 32a:	21 81       	ldd	r18, Z+1	; 0x01
 32c:	61 30       	cpi	r22, 0x01	; 1
 32e:	99 f0       	breq	.+38     	; 0x356 <gpio_set_pin_direction+0x30>
 330:	18 f0       	brcs	.+6      	; 0x338 <gpio_set_pin_direction+0x12>
 332:	62 30       	cpi	r22, 0x02	; 2
 334:	f1 f0       	breq	.+60     	; 0x372 <gpio_set_pin_direction+0x4c>
 336:	08 95       	ret
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 80       	ldd	r0, Z+2	; 0x02
 33e:	02 c0       	rjmp	.+4      	; 0x344 <gpio_set_pin_direction+0x1e>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <gpio_set_pin_direction+0x1a>
 348:	e3 2f       	mov	r30, r19
 34a:	f2 2f       	mov	r31, r18
 34c:	80 95       	com	r24
 34e:	92 91       	ld	r25, -Z
 350:	89 23       	and	r24, r25
 352:	80 83       	st	Z, r24
 354:	08 95       	ret
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 80       	ldd	r0, Z+2	; 0x02
 35c:	02 c0       	rjmp	.+4      	; 0x362 <gpio_set_pin_direction+0x3c>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <gpio_set_pin_direction+0x38>
 366:	e3 2f       	mov	r30, r19
 368:	f2 2f       	mov	r31, r18
 36a:	92 91       	ld	r25, -Z
 36c:	89 2b       	or	r24, r25
 36e:	80 83       	st	Z, r24
 370:	08 95       	ret
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	ac 01       	movw	r20, r24
 378:	02 80       	ldd	r0, Z+2	; 0x02
 37a:	02 c0       	rjmp	.+4      	; 0x380 <gpio_set_pin_direction+0x5a>
 37c:	44 0f       	add	r20, r20
 37e:	55 1f       	adc	r21, r21
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <gpio_set_pin_direction+0x56>
 384:	a3 2f       	mov	r26, r19
 386:	b2 2f       	mov	r27, r18
 388:	40 95       	com	r20
 38a:	2e 91       	ld	r18, -X
 38c:	42 23       	and	r20, r18
 38e:	4c 93       	st	X, r20
 390:	a0 81       	ld	r26, Z
 392:	b1 81       	ldd	r27, Z+1	; 0x01
 394:	02 80       	ldd	r0, Z+2	; 0x02
 396:	02 c0       	rjmp	.+4      	; 0x39c <gpio_set_pin_direction+0x76>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <gpio_set_pin_direction+0x72>
 3a0:	80 95       	com	r24
 3a2:	9c 91       	ld	r25, X
 3a4:	89 23       	and	r24, r25
 3a6:	8c 93       	st	X, r24
 3a8:	08 95       	ret

000003aa <gpio_toggle_pin_level>:
}

void gpio_toggle_pin_level(gpio *GPIOx)

{
	uint8_t *tmp_port = GPIOx->port-2;
 3aa:	dc 01       	movw	r26, r24
 3ac:	ed 91       	ld	r30, X+
 3ae:	fc 91       	ld	r31, X
 3b0:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port = 1 << GPIOx->pin;
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	a9 01       	movw	r20, r18
 3b8:	12 96       	adiw	r26, 0x02	; 2
 3ba:	0c 90       	ld	r0, X
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <gpio_toggle_pin_level+0x18>
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <gpio_toggle_pin_level+0x14>
 3c6:	32 97       	sbiw	r30, 0x02	; 2
 3c8:	40 83       	st	Z, r20
 3ca:	08 95       	ret

000003cc <__vector_39>:
gpio spi_ss_pin = {(uint8_t *)&PORTE , PORTE2};




ISR(SPI1_STC_vect){
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	8f 93       	push	r24
	if(SPSR1 & 0x40){
 3d8:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 3dc:	86 ff       	sbrs	r24, 6
 3de:	04 c0       	rjmp	.+8      	; 0x3e8 <__vector_39+0x1c>
		//spi_rx_data = 0;
		spi_txrx_done = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <__vector_39+0x22>
		}else{
		spi_txrx_done = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
	}
}
 3ee:	8f 91       	pop	r24
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_24>:
static volatile status = 0xF8;
static uint8_t twiReady;


ISR(TWI0_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	//cli(); // Disable Global Interrupt
	status=TWSR0 & 0xF8; // Get TWI Status Register, mask the prescaler bits (TWPS1,TWPS0)
 40c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 410:	88 7f       	andi	r24, 0xF8	; 248
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <status+0x1>
 418:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
	switch(status) {
 41c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 420:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <status+0x1>
 424:	88 3a       	cpi	r24, 0xA8	; 168
 426:	91 05       	cpc	r25, r1
 428:	31 f1       	breq	.+76     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 42a:	3c f4       	brge	.+14     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 42c:	80 38       	cpi	r24, 0x80	; 128
 42e:	91 05       	cpc	r25, r1
 430:	59 f0       	breq	.+22     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 432:	80 3a       	cpi	r24, 0xA0	; 160
 434:	91 05       	cpc	r25, r1
 436:	c9 f0       	breq	.+50     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 438:	42 c0       	rjmp	.+132    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 43a:	88 3b       	cpi	r24, 0xB8	; 184
 43c:	91 05       	cpc	r25, r1
 43e:	61 f1       	breq	.+88     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 440:	80 3c       	cpi	r24, 0xC0	; 192
 442:	91 05       	cpc	r25, r1
 444:	d1 f1       	breq	.+116    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 446:	3b c0       	rjmp	.+118    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		case TW_SR_SLA_ACK:	// 0x60: SLA+W received, ACK returned
			break;
		case TW_SR_DATA_ACK:	// 0x80: data received, ACK returned
			twi_buff[byteIndex] = TWDR0;	// Save data to the register address
 448:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 44c:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <twi_buff>
 450:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <twi_buff+0x1>
 454:	e8 0f       	add	r30, r24
 456:	f1 1d       	adc	r31, r1
 458:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 45c:	80 83       	st	Z, r24
			byteIndex++;
 45e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 462:	8f 5f       	subi	r24, 0xFF	; 255
 464:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <byteIndex>
		break;
 468:	2a c0       	rjmp	.+84     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			case TW_SR_STOP:	// 0xA0: stop or repeated start condition received while selected
			twiReady = 1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <twiReady>
			byteIndex = 0;
 470:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <byteIndex>
		break;
 474:	24 c0       	rjmp	.+72     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			case TW_ST_SLA_ACK:	// 0xA8: SLA+R received, ACK returned {ADDRESS REGISTER or first byte in slave mode}
			TWDR0 = twi_buff[byteIndex];
 476:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 47a:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <twi_buff>
 47e:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <twi_buff+0x1>
 482:	e8 0f       	add	r30, r24
 484:	f1 1d       	adc	r31, r1
 486:	80 81       	ld	r24, Z
 488:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			byteIndex++;
 48c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 490:	8f 5f       	subi	r24, 0xFF	; 255
 492:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <byteIndex>
			break;
 496:	13 c0       	rjmp	.+38     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		case TW_ST_DATA_ACK:	// 0xB8: data transmitted, ACK received
			TWDR0 = twi_buff[byteIndex];
 498:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 49c:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <twi_buff>
 4a0:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <twi_buff+0x1>
 4a4:	e8 0f       	add	r30, r24
 4a6:	f1 1d       	adc	r31, r1
 4a8:	80 81       	ld	r24, Z
 4aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			byteIndex++;
 4ae:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <byteIndex>
			break;
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		case TW_ST_DATA_NACK:	// 0xC0: data transmitted, NACK received
			byteIndex = 0;
 4ba:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <byteIndex>
		case TW_BUS_ERROR:	// 0x00: illegal start or stop condition
			break;
		default:
			break;
	}
	if (twi_mode){TWCR0 |= (1<<TWINT);}// Clear TWINT Flag
 4be:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <twi_mode>
 4c2:	88 23       	and	r24, r24
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4c6:	ec eb       	ldi	r30, 0xBC	; 188
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	80 68       	ori	r24, 0x80	; 128
 4ce:	80 83       	st	Z, r24
	//sei(); // Enable Global Interrupt
}
 4d0:	ff 91       	pop	r31
 4d2:	ef 91       	pop	r30
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__vector_40>:
void twi1_init(uint32_t speed){
	twi_mode = 0;
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
	TWBR1 = gen_t & 0xFF;
	TWCR1 = (1 << TWEN) | (1 << TWIE);
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
 4f4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
 4f8:	88 7f       	andi	r24, 0xF8	; 248
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <status+0x1>
 500:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
 504:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
 508:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <status+0x1>
 50c:	88 3a       	cpi	r24, 0xA8	; 168
 50e:	91 05       	cpc	r25, r1
 510:	31 f1       	breq	.+76     	; 0x55e <__vector_40+0x7c>
 512:	3c f4       	brge	.+14     	; 0x522 <__vector_40+0x40>
 514:	80 38       	cpi	r24, 0x80	; 128
 516:	91 05       	cpc	r25, r1
 518:	59 f0       	breq	.+22     	; 0x530 <__vector_40+0x4e>
 51a:	80 3a       	cpi	r24, 0xA0	; 160
 51c:	91 05       	cpc	r25, r1
 51e:	c9 f0       	breq	.+50     	; 0x552 <__vector_40+0x70>
 520:	42 c0       	rjmp	.+132    	; 0x5a6 <__vector_40+0xc4>
 522:	88 3b       	cpi	r24, 0xB8	; 184
 524:	91 05       	cpc	r25, r1
 526:	61 f1       	breq	.+88     	; 0x580 <__vector_40+0x9e>
 528:	80 3c       	cpi	r24, 0xC0	; 192
 52a:	91 05       	cpc	r25, r1
 52c:	d1 f1       	breq	.+116    	; 0x5a2 <__vector_40+0xc0>
 52e:	3b c0       	rjmp	.+118    	; 0x5a6 <__vector_40+0xc4>
 530:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 534:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <twi_buff>
 538:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <twi_buff+0x1>
 53c:	e8 0f       	add	r30, r24
 53e:	f1 1d       	adc	r31, r1
 540:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
 544:	80 83       	st	Z, r24
 546:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 54a:	8f 5f       	subi	r24, 0xFF	; 255
 54c:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <byteIndex>
 550:	2a c0       	rjmp	.+84     	; 0x5a6 <__vector_40+0xc4>
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <twiReady>
 558:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <byteIndex>
 55c:	24 c0       	rjmp	.+72     	; 0x5a6 <__vector_40+0xc4>
 55e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 562:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <twi_buff>
 566:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <twi_buff+0x1>
 56a:	e8 0f       	add	r30, r24
 56c:	f1 1d       	adc	r31, r1
 56e:	80 81       	ld	r24, Z
 570:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
 574:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 578:	8f 5f       	subi	r24, 0xFF	; 255
 57a:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <byteIndex>
 57e:	13 c0       	rjmp	.+38     	; 0x5a6 <__vector_40+0xc4>
 580:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 584:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <twi_buff>
 588:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <twi_buff+0x1>
 58c:	e8 0f       	add	r30, r24
 58e:	f1 1d       	adc	r31, r1
 590:	80 81       	ld	r24, Z
 592:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
 596:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <byteIndex>
 59a:	8f 5f       	subi	r24, 0xFF	; 255
 59c:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <byteIndex>
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__vector_40+0xc4>
 5a2:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <byteIndex>
 5a6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <twi_mode>
 5aa:	88 23       	and	r24, r24
 5ac:	29 f0       	breq	.+10     	; 0x5b8 <__vector_40+0xd6>
 5ae:	ec ed       	ldi	r30, 0xDC	; 220
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	80 68       	ori	r24, 0x80	; 128
 5b6:	80 83       	st	Z, r24
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <twi1_slave_init>:
	//PORTC |= (1 << PORTC5 | 1 << PORTC4);
	
}

void twi1_slave_init(uint8_t addr, uint8_t *data, uint32_t speed){
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	c8 2f       	mov	r28, r24
 5d2:	8b 01       	movw	r16, r22
	twi_mode = 1;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <twi_mode>
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	72 e1       	ldi	r23, 0x12	; 18
 5de:	8a e7       	ldi	r24, 0x7A	; 122
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 25 07 	call	0xe4a	; 0xe4a <__udivmodsi4>
 5e6:	da 01       	movw	r26, r20
 5e8:	c9 01       	movw	r24, r18
 5ea:	40 97       	sbiw	r24, 0x10	; 16
 5ec:	a1 09       	sbc	r26, r1
 5ee:	b1 09       	sbc	r27, r1
 5f0:	b6 95       	lsr	r27
 5f2:	a7 95       	ror	r26
 5f4:	97 95       	ror	r25
 5f6:	87 95       	ror	r24
	TWBR1 = gen_t & 0xFF;
 5f8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	PORTE |= ((1<<PINE0) | (1<<PINE1));
 5fc:	8e b1       	in	r24, 0x0e	; 14
 5fe:	83 60       	ori	r24, 0x03	; 3
 600:	8e b9       	out	0x0e, r24	; 14
	TWAR1 = ((addr & 0xFE)<<1);
 602:	ce 7f       	andi	r28, 0xFE	; 254
 604:	cc 0f       	add	r28, r28
 606:	c0 93 da 00 	sts	0x00DA, r28	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	TWDR1 = 0x00;			// Default Initial Value
 60a:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	//// Start Slave Listening: Clear TWINT Flag, Enable ACK, Enable TWI, TWI Interrupt Enable
	TWCR1 = 0;
 60e:	ec ed       	ldi	r30, 0xDC	; 220
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	10 82       	st	Z, r1
	TWCR1 = (1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
 614:	85 ec       	ldi	r24, 0xC5	; 197
 616:	80 83       	st	Z, r24
	twi_buff = data;
 618:	10 93 b3 02 	sts	0x02B3, r17	; 0x8002b3 <twi_buff+0x1>
 61c:	00 93 b2 02 	sts	0x02B2, r16	; 0x8002b2 <twi_buff>
}
 620:	cf 91       	pop	r28
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	08 95       	ret

00000628 <__vector_18>:
	read_complete = false;
	rx_count=0;
	return test_array;
}

ISR(USART0_RX_vect){
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
	
	//volatile static uint16_t rx_write_pos = 0;
	test_array[rx_count] = UDR0;
 63a:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <rx_count>
 63e:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <rx_count+0x1>
 642:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 646:	e9 5d       	subi	r30, 0xD9	; 217
 648:	fd 4f       	sbci	r31, 0xFD	; 253
 64a:	80 83       	st	Z, r24
	if (test_array[rx_count] == 0x0D){
 64c:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <rx_count>
 650:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <rx_count+0x1>
 654:	e9 5d       	subi	r30, 0xD9	; 217
 656:	fd 4f       	sbci	r31, 0xFD	; 253
 658:	80 81       	ld	r24, Z
 65a:	8d 30       	cpi	r24, 0x0D	; 13
 65c:	51 f4       	brne	.+20     	; 0x672 <__vector_18+0x4a>
		read_complete = true;
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <read_complete>
		test_array[rx_count+1] = 0;
 664:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <rx_count>
 668:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <rx_count+0x1>
 66c:	e8 5d       	subi	r30, 0xD8	; 216
 66e:	fd 4f       	sbci	r31, 0xFD	; 253
 670:	10 82       	st	Z, r1
	}
	rx_count +=1;
 672:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <rx_count>
 676:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <rx_count+0x1>
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <rx_count+0x1>
 680:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <rx_count>
	
}
 684:	ff 91       	pop	r31
 686:	ef 91       	pop	r30
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__vector_20>:

//memset(rx_buffer, 0, sizeof(rx_buffer));

ISR(USART0_TX_vect){
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	8f 93       	push	r24
	uart_tx_busy = 1;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uart_tx_busy>
}
 6a8:	8f 91       	pop	r24
 6aa:	0f 90       	pop	r0
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	0f 90       	pop	r0
 6b0:	1f 90       	pop	r1
 6b2:	18 95       	reti

000006b4 <main>:
	
	
	
int main(void)
{
	sei();
 6b4:	78 94       	sei
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 6b6:	9f e0       	ldi	r25, 0x0F	; 15
 6b8:	88 e1       	ldi	r24, 0x18	; 24
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	a8 95       	wdr
 6c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	wdt_enable(WDTO_2S);
	//uart_init(250000, 1);
	//twi1_init(400000);
	twi1_slave_init(TWIADDR, &twiDataBuff, TWISPEED);
 6ca:	20 e8       	ldi	r18, 0x80	; 128
 6cc:	3a e1       	ldi	r19, 0x1A	; 26
 6ce:	46 e0       	ldi	r20, 0x06	; 6
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	64 eb       	ldi	r22, 0xB4	; 180
 6d4:	72 e0       	ldi	r23, 0x02	; 2
 6d6:	84 e5       	ldi	r24, 0x54	; 84
 6d8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <twi1_slave_init>
	
	gpio_set_pin_direction(&sData , PORT_DIR_IN);
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	86 e1       	ldi	r24, 0x16	; 22
 6e0:	92 e0       	ldi	r25, 0x02	; 2
 6e2:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
	gpio_set_pin_direction(&sClock , PORT_DIR_IN);
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	83 e1       	ldi	r24, 0x13	; 19
 6ea:	92 e0       	ldi	r25, 0x02	; 2
 6ec:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
	gpio_set_pin_direction(&drvEn , PORT_DIR_OUT); gpio_set_pin_level(&drvEn, true);
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	8f e1       	ldi	r24, 0x1F	; 31
 6f4:	92 e0       	ldi	r25, 0x02	; 2
 6f6:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	8f e1       	ldi	r24, 0x1F	; 31
 6fe:	92 e0       	ldi	r25, 0x02	; 2
 700:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ledRun , PORT_DIR_OUT); gpio_set_pin_level(&ledRun, false);
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	8c e1       	ldi	r24, 0x1C	; 28
 708:	92 e0       	ldi	r25, 0x02	; 2
 70a:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	8c e1       	ldi	r24, 0x1C	; 28
 712:	92 e0       	ldi	r25, 0x02	; 2
 714:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ledFail , PORT_DIR_OUT); gpio_set_pin_level(&ledFail, true);
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	89 e1       	ldi	r24, 0x19	; 25
 71c:	92 e0       	ldi	r25, 0x02	; 2
 71e:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 722:	61 e0       	ldi	r22, 0x01	; 1
 724:	89 e1       	ldi	r24, 0x19	; 25
 726:	92 e0       	ldi	r25, 0x02	; 2
 728:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	
	gpio_set_pin_direction(&ch1Config , PORT_DIR_OUT); gpio_set_pin_level(&ch1Config, false);
 72c:	61 e0       	ldi	r22, 0x01	; 1
 72e:	80 e1       	ldi	r24, 0x10	; 16
 730:	92 e0       	ldi	r25, 0x02	; 2
 732:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	80 e1       	ldi	r24, 0x10	; 16
 73a:	92 e0       	ldi	r25, 0x02	; 2
 73c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ch2Config , PORT_DIR_OUT); gpio_set_pin_level(&ch2Config, false);
 740:	61 e0       	ldi	r22, 0x01	; 1
 742:	8d e0       	ldi	r24, 0x0D	; 13
 744:	92 e0       	ldi	r25, 0x02	; 2
 746:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	8d e0       	ldi	r24, 0x0D	; 13
 74e:	92 e0       	ldi	r25, 0x02	; 2
 750:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ch3Config , PORT_DIR_OUT); gpio_set_pin_level(&ch3Config, false);
 754:	61 e0       	ldi	r22, 0x01	; 1
 756:	8a e0       	ldi	r24, 0x0A	; 10
 758:	92 e0       	ldi	r25, 0x02	; 2
 75a:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	8a e0       	ldi	r24, 0x0A	; 10
 762:	92 e0       	ldi	r25, 0x02	; 2
 764:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ch4Config , PORT_DIR_OUT); gpio_set_pin_level(&ch4Config, false);
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	87 e0       	ldi	r24, 0x07	; 7
 76c:	92 e0       	ldi	r25, 0x02	; 2
 76e:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	87 e0       	ldi	r24, 0x07	; 7
 776:	92 e0       	ldi	r25, 0x02	; 2
 778:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
    
	sei();
 77c:	78 94       	sei
	
	adc_init();
 77e:	0e 94 b5 00 	call	0x16a	; 0x16a <adc_init>
	
	//Set channels default values
	CH1 = 0;
 782:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 786:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	CH2 = 0;
 78a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	CH3 = 0;
 78e:	17 bc       	out	0x27, r1	; 39
	CH4 = 0;
 790:	18 bc       	out	0x28, r1	; 40

	//Setup timer 0, CH A and B for out 3 and 4
	TCCR0A = (0b10 << COM0A0) | (0b10 << COM0B0) | (0b01 << WGM00);
 792:	81 ea       	ldi	r24, 0xA1	; 161
 794:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0b0 << WGM02) | (0b1 << CS10);
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	85 bd       	out	0x25, r24	; 37
	
	//Setup timer 1, CH B for out 1
	TCCR1A = (0b10 << COM1B0) | (0b01 << WGM00);
 79a:	91 e2       	ldi	r25, 0x21	; 33
 79c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (0b0 << WGM02) | (0b1 << CS10);
 7a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//Setup timer 2, CH A for out 2
	TCCR2A = (0b10 << COM2A0) | (0b01 << WGM00);
 7a4:	91 e8       	ldi	r25, 0x81	; 129
 7a6:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (0b0 << WGM02) | (0b1 << CS10);
 7aa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7ae:	2f ef       	ldi	r18, 0xFF	; 255
 7b0:	80 e7       	ldi	r24, 0x70	; 112
 7b2:	92 e0       	ldi	r25, 0x02	; 2
 7b4:	21 50       	subi	r18, 0x01	; 1
 7b6:	80 40       	sbci	r24, 0x00	; 0
 7b8:	90 40       	sbci	r25, 0x00	; 0
 7ba:	e1 f7       	brne	.-8      	; 0x7b4 <main+0x100>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <main+0x10a>
 7be:	00 00       	nop
	
	
	_delay_ms(100);
	gpio_set_pin_level(&ledFail, false);
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	89 e1       	ldi	r24, 0x19	; 25
 7c4:	92 e0       	ldi	r25, 0x02	; 2
 7c6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
    while (1) 
    {
		wdt_reset();
 7ca:	a8 95       	wdr
		ntc1Celsius = getNTC(NTC1);
 7cc:	82 e0       	ldi	r24, 0x02	; 2
 7ce:	0e 94 65 01 	call	0x2ca	; 0x2ca <getNTC>
 7d2:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <ntc1Celsius+0x1>
 7d6:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <ntc1Celsius>
		inputVoltage = get_mVolt(VOLTMONITOR1);
 7da:	84 e0       	ldi	r24, 0x04	; 4
 7dc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <get_mVolt>
 7e0:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <inputVoltage+0x1>
 7e4:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <inputVoltage>
		outputCurrent = get_mAmps(CURRMONITOR);
 7e8:	83 e0       	ldi	r24, 0x03	; 3
 7ea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <get_mAmps>
 7ee:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <outputCurrent+0x1>
 7f2:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <outputCurrent>
		
		
		if (inputVoltage <= CRITICALVOLTAGE){
 7f6:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <inputVoltage>
 7fa:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <inputVoltage+0x1>
 7fe:	85 30       	cpi	r24, 0x05	; 5
 800:	29 e2       	ldi	r18, 0x29	; 41
 802:	92 07       	cpc	r25, r18
 804:	18 f4       	brcc	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			protectionFlg = 1;
 806:	21 e0       	ldi	r18, 0x01	; 1
 808:	20 93 a9 02 	sts	0x02A9, r18	; 0x8002a9 <protectionFlg>
		}
		if (inputVoltage >= WORKRESTOREVOLTAGE){
 80c:	88 3f       	cpi	r24, 0xF8	; 248
 80e:	9a 42       	sbci	r25, 0x2A	; 42
 810:	10 f0       	brcs	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			protectionFlg = 0;
 812:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <protectionFlg>
		}
		
		if(protectionFlg != 0){
 816:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <protectionFlg>
 81a:	88 23       	and	r24, r24
 81c:	d1 f0       	breq	.+52     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			gpio_set_pin_level(&drvEn, true);
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	8f e1       	ldi	r24, 0x1F	; 31
 822:	92 e0       	ldi	r25, 0x02	; 2
 824:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
			gpio_set_pin_level(&ledRun, false);
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	8c e1       	ldi	r24, 0x1C	; 28
 82c:	92 e0       	ldi	r25, 0x02	; 2
 82e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
			gpio_toggle_pin_level(&ledFail);
 832:	89 e1       	ldi	r24, 0x19	; 25
 834:	92 e0       	ldi	r25, 0x02	; 2
 836:	0e 94 d5 01 	call	0x3aa	; 0x3aa <gpio_toggle_pin_level>
			
			
			lightLevel=0;
 83a:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <lightLevel>
 83e:	8f e7       	ldi	r24, 0x7F	; 127
 840:	9a e1       	ldi	r25, 0x1A	; 26
 842:	26 e0       	ldi	r18, 0x06	; 6
 844:	81 50       	subi	r24, 0x01	; 1
 846:	90 40       	sbci	r25, 0x00	; 0
 848:	20 40       	sbci	r18, 0x00	; 0
 84a:	e1 f7       	brne	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84e:	00 00       	nop
 850:	bc cf       	rjmp	.-136    	; 0x7ca <main+0x116>
			_delay_ms(250);
		}else{
			gpio_set_pin_level(&drvEn, false);
 852:	60 e0       	ldi	r22, 0x00	; 0
 854:	8f e1       	ldi	r24, 0x1F	; 31
 856:	92 e0       	ldi	r25, 0x02	; 2
 858:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
			gpio_set_pin_level(&ledFail, false);
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	89 e1       	ldi	r24, 0x19	; 25
 860:	92 e0       	ldi	r25, 0x02	; 2
 862:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
			gpio_set_pin_level(&ledRun, true);
 866:	61 e0       	ldi	r22, 0x01	; 1
 868:	8c e1       	ldi	r24, 0x1C	; 28
 86a:	92 e0       	ldi	r25, 0x02	; 2
 86c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
			
			if(lightLevel < LIGHTTARGETLEVEL){
 870:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <lightLevel>
 874:	8f 3f       	cpi	r24, 0xFF	; 255
 876:	49 f0       	breq	.+18     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
				lightLevel++;
 878:	8f 5f       	subi	r24, 0xFF	; 255
 87a:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <lightLevel>
 87e:	8f e3       	ldi	r24, 0x3F	; 63
 880:	9c e9       	ldi	r25, 0x9C	; 156
 882:	01 97       	sbiw	r24, 0x01	; 1
 884:	f1 f7       	brne	.-4      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 886:	00 c0       	rjmp	.+0      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 888:	00 00       	nop
uint8_t protectionFlg = 0;
	
	
	
int main(void)
{
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	1c c0       	rjmp	.+56     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
			}
			
			
			for (uint8_t ch = 0; ch<=sizeof(pwmChCalcReg); ch++)
			{
				if(pwmChCalcReg[ch] < twiDataBuff[ch]){
 88e:	83 2f       	mov	r24, r19
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	fc 01       	movw	r30, r24
 894:	ec 50       	subi	r30, 0x0C	; 12
 896:	fd 4f       	sbci	r31, 0xFD	; 253
 898:	20 81       	ld	r18, Z
 89a:	fc 01       	movw	r30, r24
 89c:	ec 54       	subi	r30, 0x4C	; 76
 89e:	fd 4f       	sbci	r31, 0xFD	; 253
 8a0:	40 81       	ld	r20, Z
 8a2:	24 17       	cp	r18, r20
 8a4:	40 f4       	brcc	.+16     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
					if(pwmChCalcReg[ch]!= 255){
 8a6:	2f 3f       	cpi	r18, 0xFF	; 255
 8a8:	69 f0       	breq	.+26     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
						pwmChCalcReg[ch]++;
 8aa:	fc 01       	movw	r30, r24
 8ac:	ec 50       	subi	r30, 0x0C	; 12
 8ae:	fd 4f       	sbci	r31, 0xFD	; 253
 8b0:	2f 5f       	subi	r18, 0xFF	; 255
 8b2:	20 83       	st	Z, r18
 8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
					}
				}
				else{
					if(pwmChCalcReg[ch]!= 0){
 8b6:	22 23       	and	r18, r18
 8b8:	29 f0       	breq	.+10     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
						pwmChCalcReg[ch]--;
 8ba:	fc 01       	movw	r30, r24
 8bc:	ec 50       	subi	r30, 0x0C	; 12
 8be:	fd 4f       	sbci	r31, 0xFD	; 253
 8c0:	21 50       	subi	r18, 0x01	; 1
 8c2:	20 83       	st	Z, r18
				lightLevel++;
				_delay_ms(INCRSTEPTIME);
			}
			
			
			for (uint8_t ch = 0; ch<=sizeof(pwmChCalcReg); ch++)
 8c4:	3f 5f       	subi	r19, 0xFF	; 255
 8c6:	35 30       	cpi	r19, 0x05	; 5
 8c8:	10 f3       	brcs	.-60     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					if(pwmChCalcReg[ch]!= 0){
						pwmChCalcReg[ch]--;
					}
				}
			}
			CH1 = TAB_PWM_1[pwmChCalcReg[0]];
 8ca:	a4 ef       	ldi	r26, 0xF4	; 244
 8cc:	b2 e0       	ldi	r27, 0x02	; 2
 8ce:	ec 91       	ld	r30, X
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	e9 5f       	subi	r30, 0xF9	; 249
 8d4:	fe 4f       	sbci	r31, 0xFE	; 254
 8d6:	80 81       	ld	r24, Z
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 8de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			CH2 = TAB_PWM_1[pwmChCalcReg[1]];
 8e2:	11 96       	adiw	r26, 0x01	; 1
 8e4:	ec 91       	ld	r30, X
 8e6:	11 97       	sbiw	r26, 0x01	; 1
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	e9 5f       	subi	r30, 0xF9	; 249
 8ec:	fe 4f       	sbci	r31, 0xFE	; 254
 8ee:	80 81       	ld	r24, Z
 8f0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			CH3 = TAB_PWM_1[pwmChCalcReg[2]];
 8f4:	12 96       	adiw	r26, 0x02	; 2
 8f6:	ec 91       	ld	r30, X
 8f8:	12 97       	sbiw	r26, 0x02	; 2
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	e9 5f       	subi	r30, 0xF9	; 249
 8fe:	fe 4f       	sbci	r31, 0xFE	; 254
 900:	80 81       	ld	r24, Z
 902:	87 bd       	out	0x27, r24	; 39
			CH4 = TAB_PWM_1[pwmChCalcReg[3]];
 904:	13 96       	adiw	r26, 0x03	; 3
 906:	ec 91       	ld	r30, X
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	e9 5f       	subi	r30, 0xF9	; 249
 90c:	fe 4f       	sbci	r31, 0xFE	; 254
 90e:	80 81       	ld	r24, Z
 910:	88 bd       	out	0x28, r24	; 40
 912:	8f ec       	ldi	r24, 0xCF	; 207
 914:	97 e0       	ldi	r25, 0x07	; 7
 916:	01 97       	sbiw	r24, 0x01	; 1
 918:	f1 f7       	brne	.-4      	; 0x916 <__stack+0x17>
 91a:	00 c0       	rjmp	.+0      	; 0x91c <__stack+0x1d>
 91c:	00 00       	nop
 91e:	55 cf       	rjmp	.-342    	; 0x7ca <main+0x116>

00000920 <__subsf3>:
 920:	50 58       	subi	r21, 0x80	; 128

00000922 <__addsf3>:
 922:	bb 27       	eor	r27, r27
 924:	aa 27       	eor	r26, r26
 926:	0e 94 a8 04 	call	0x950	; 0x950 <__addsf3x>
 92a:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_round>
 92e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_pscA>
 932:	38 f0       	brcs	.+14     	; 0x942 <__addsf3+0x20>
 934:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_pscB>
 938:	20 f0       	brcs	.+8      	; 0x942 <__addsf3+0x20>
 93a:	39 f4       	brne	.+14     	; 0x94a <__addsf3+0x28>
 93c:	9f 3f       	cpi	r25, 0xFF	; 255
 93e:	19 f4       	brne	.+6      	; 0x946 <__addsf3+0x24>
 940:	26 f4       	brtc	.+8      	; 0x94a <__addsf3+0x28>
 942:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_nan>
 946:	0e f4       	brtc	.+2      	; 0x94a <__addsf3+0x28>
 948:	e0 95       	com	r30
 94a:	e7 fb       	bst	r30, 7
 94c:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>

00000950 <__addsf3x>:
 950:	e9 2f       	mov	r30, r25
 952:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fp_split3>
 956:	58 f3       	brcs	.-42     	; 0x92e <__addsf3+0xc>
 958:	ba 17       	cp	r27, r26
 95a:	62 07       	cpc	r22, r18
 95c:	73 07       	cpc	r23, r19
 95e:	84 07       	cpc	r24, r20
 960:	95 07       	cpc	r25, r21
 962:	20 f0       	brcs	.+8      	; 0x96c <__addsf3x+0x1c>
 964:	79 f4       	brne	.+30     	; 0x984 <__addsf3x+0x34>
 966:	a6 f5       	brtc	.+104    	; 0x9d0 <__addsf3x+0x80>
 968:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_zero>
 96c:	0e f4       	brtc	.+2      	; 0x970 <__addsf3x+0x20>
 96e:	e0 95       	com	r30
 970:	0b 2e       	mov	r0, r27
 972:	ba 2f       	mov	r27, r26
 974:	a0 2d       	mov	r26, r0
 976:	0b 01       	movw	r0, r22
 978:	b9 01       	movw	r22, r18
 97a:	90 01       	movw	r18, r0
 97c:	0c 01       	movw	r0, r24
 97e:	ca 01       	movw	r24, r20
 980:	a0 01       	movw	r20, r0
 982:	11 24       	eor	r1, r1
 984:	ff 27       	eor	r31, r31
 986:	59 1b       	sub	r21, r25
 988:	99 f0       	breq	.+38     	; 0x9b0 <__addsf3x+0x60>
 98a:	59 3f       	cpi	r21, 0xF9	; 249
 98c:	50 f4       	brcc	.+20     	; 0x9a2 <__addsf3x+0x52>
 98e:	50 3e       	cpi	r21, 0xE0	; 224
 990:	68 f1       	brcs	.+90     	; 0x9ec <__addsf3x+0x9c>
 992:	1a 16       	cp	r1, r26
 994:	f0 40       	sbci	r31, 0x00	; 0
 996:	a2 2f       	mov	r26, r18
 998:	23 2f       	mov	r18, r19
 99a:	34 2f       	mov	r19, r20
 99c:	44 27       	eor	r20, r20
 99e:	58 5f       	subi	r21, 0xF8	; 248
 9a0:	f3 cf       	rjmp	.-26     	; 0x988 <__addsf3x+0x38>
 9a2:	46 95       	lsr	r20
 9a4:	37 95       	ror	r19
 9a6:	27 95       	ror	r18
 9a8:	a7 95       	ror	r26
 9aa:	f0 40       	sbci	r31, 0x00	; 0
 9ac:	53 95       	inc	r21
 9ae:	c9 f7       	brne	.-14     	; 0x9a2 <__addsf3x+0x52>
 9b0:	7e f4       	brtc	.+30     	; 0x9d0 <__addsf3x+0x80>
 9b2:	1f 16       	cp	r1, r31
 9b4:	ba 0b       	sbc	r27, r26
 9b6:	62 0b       	sbc	r22, r18
 9b8:	73 0b       	sbc	r23, r19
 9ba:	84 0b       	sbc	r24, r20
 9bc:	ba f0       	brmi	.+46     	; 0x9ec <__addsf3x+0x9c>
 9be:	91 50       	subi	r25, 0x01	; 1
 9c0:	a1 f0       	breq	.+40     	; 0x9ea <__addsf3x+0x9a>
 9c2:	ff 0f       	add	r31, r31
 9c4:	bb 1f       	adc	r27, r27
 9c6:	66 1f       	adc	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	88 1f       	adc	r24, r24
 9cc:	c2 f7       	brpl	.-16     	; 0x9be <__addsf3x+0x6e>
 9ce:	0e c0       	rjmp	.+28     	; 0x9ec <__addsf3x+0x9c>
 9d0:	ba 0f       	add	r27, r26
 9d2:	62 1f       	adc	r22, r18
 9d4:	73 1f       	adc	r23, r19
 9d6:	84 1f       	adc	r24, r20
 9d8:	48 f4       	brcc	.+18     	; 0x9ec <__addsf3x+0x9c>
 9da:	87 95       	ror	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b7 95       	ror	r27
 9e2:	f7 95       	ror	r31
 9e4:	9e 3f       	cpi	r25, 0xFE	; 254
 9e6:	08 f0       	brcs	.+2      	; 0x9ea <__addsf3x+0x9a>
 9e8:	b0 cf       	rjmp	.-160    	; 0x94a <__addsf3+0x28>
 9ea:	93 95       	inc	r25
 9ec:	88 0f       	add	r24, r24
 9ee:	08 f0       	brcs	.+2      	; 0x9f2 <__addsf3x+0xa2>
 9f0:	99 27       	eor	r25, r25
 9f2:	ee 0f       	add	r30, r30
 9f4:	97 95       	ror	r25
 9f6:	87 95       	ror	r24
 9f8:	08 95       	ret

000009fa <__divsf3>:
 9fa:	0e 94 11 05 	call	0xa22	; 0xa22 <__divsf3x>
 9fe:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_round>
 a02:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_pscB>
 a06:	58 f0       	brcs	.+22     	; 0xa1e <__divsf3+0x24>
 a08:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_pscA>
 a0c:	40 f0       	brcs	.+16     	; 0xa1e <__divsf3+0x24>
 a0e:	29 f4       	brne	.+10     	; 0xa1a <__divsf3+0x20>
 a10:	5f 3f       	cpi	r21, 0xFF	; 255
 a12:	29 f0       	breq	.+10     	; 0xa1e <__divsf3+0x24>
 a14:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
 a18:	51 11       	cpse	r21, r1
 a1a:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_szero>
 a1e:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_nan>

00000a22 <__divsf3x>:
 a22:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fp_split3>
 a26:	68 f3       	brcs	.-38     	; 0xa02 <__divsf3+0x8>

00000a28 <__divsf3_pse>:
 a28:	99 23       	and	r25, r25
 a2a:	b1 f3       	breq	.-20     	; 0xa18 <__divsf3+0x1e>
 a2c:	55 23       	and	r21, r21
 a2e:	91 f3       	breq	.-28     	; 0xa14 <__divsf3+0x1a>
 a30:	95 1b       	sub	r25, r21
 a32:	55 0b       	sbc	r21, r21
 a34:	bb 27       	eor	r27, r27
 a36:	aa 27       	eor	r26, r26
 a38:	62 17       	cp	r22, r18
 a3a:	73 07       	cpc	r23, r19
 a3c:	84 07       	cpc	r24, r20
 a3e:	38 f0       	brcs	.+14     	; 0xa4e <__divsf3_pse+0x26>
 a40:	9f 5f       	subi	r25, 0xFF	; 255
 a42:	5f 4f       	sbci	r21, 0xFF	; 255
 a44:	22 0f       	add	r18, r18
 a46:	33 1f       	adc	r19, r19
 a48:	44 1f       	adc	r20, r20
 a4a:	aa 1f       	adc	r26, r26
 a4c:	a9 f3       	breq	.-22     	; 0xa38 <__divsf3_pse+0x10>
 a4e:	35 d0       	rcall	.+106    	; 0xaba <__divsf3_pse+0x92>
 a50:	0e 2e       	mov	r0, r30
 a52:	3a f0       	brmi	.+14     	; 0xa62 <__divsf3_pse+0x3a>
 a54:	e0 e8       	ldi	r30, 0x80	; 128
 a56:	32 d0       	rcall	.+100    	; 0xabc <__divsf3_pse+0x94>
 a58:	91 50       	subi	r25, 0x01	; 1
 a5a:	50 40       	sbci	r21, 0x00	; 0
 a5c:	e6 95       	lsr	r30
 a5e:	00 1c       	adc	r0, r0
 a60:	ca f7       	brpl	.-14     	; 0xa54 <__divsf3_pse+0x2c>
 a62:	2b d0       	rcall	.+86     	; 0xaba <__divsf3_pse+0x92>
 a64:	fe 2f       	mov	r31, r30
 a66:	29 d0       	rcall	.+82     	; 0xaba <__divsf3_pse+0x92>
 a68:	66 0f       	add	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	bb 1f       	adc	r27, r27
 a70:	26 17       	cp	r18, r22
 a72:	37 07       	cpc	r19, r23
 a74:	48 07       	cpc	r20, r24
 a76:	ab 07       	cpc	r26, r27
 a78:	b0 e8       	ldi	r27, 0x80	; 128
 a7a:	09 f0       	breq	.+2      	; 0xa7e <__divsf3_pse+0x56>
 a7c:	bb 0b       	sbc	r27, r27
 a7e:	80 2d       	mov	r24, r0
 a80:	bf 01       	movw	r22, r30
 a82:	ff 27       	eor	r31, r31
 a84:	93 58       	subi	r25, 0x83	; 131
 a86:	5f 4f       	sbci	r21, 0xFF	; 255
 a88:	3a f0       	brmi	.+14     	; 0xa98 <__divsf3_pse+0x70>
 a8a:	9e 3f       	cpi	r25, 0xFE	; 254
 a8c:	51 05       	cpc	r21, r1
 a8e:	78 f0       	brcs	.+30     	; 0xaae <__divsf3_pse+0x86>
 a90:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
 a94:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_szero>
 a98:	5f 3f       	cpi	r21, 0xFF	; 255
 a9a:	e4 f3       	brlt	.-8      	; 0xa94 <__divsf3_pse+0x6c>
 a9c:	98 3e       	cpi	r25, 0xE8	; 232
 a9e:	d4 f3       	brlt	.-12     	; 0xa94 <__divsf3_pse+0x6c>
 aa0:	86 95       	lsr	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	f7 95       	ror	r31
 aaa:	9f 5f       	subi	r25, 0xFF	; 255
 aac:	c9 f7       	brne	.-14     	; 0xaa0 <__divsf3_pse+0x78>
 aae:	88 0f       	add	r24, r24
 ab0:	91 1d       	adc	r25, r1
 ab2:	96 95       	lsr	r25
 ab4:	87 95       	ror	r24
 ab6:	97 f9       	bld	r25, 7
 ab8:	08 95       	ret
 aba:	e1 e0       	ldi	r30, 0x01	; 1
 abc:	66 0f       	add	r22, r22
 abe:	77 1f       	adc	r23, r23
 ac0:	88 1f       	adc	r24, r24
 ac2:	bb 1f       	adc	r27, r27
 ac4:	62 17       	cp	r22, r18
 ac6:	73 07       	cpc	r23, r19
 ac8:	84 07       	cpc	r24, r20
 aca:	ba 07       	cpc	r27, r26
 acc:	20 f0       	brcs	.+8      	; 0xad6 <__divsf3_pse+0xae>
 ace:	62 1b       	sub	r22, r18
 ad0:	73 0b       	sbc	r23, r19
 ad2:	84 0b       	sbc	r24, r20
 ad4:	ba 0b       	sbc	r27, r26
 ad6:	ee 1f       	adc	r30, r30
 ad8:	88 f7       	brcc	.-30     	; 0xabc <__divsf3_pse+0x94>
 ada:	e0 95       	com	r30
 adc:	08 95       	ret

00000ade <__fixsfsi>:
 ade:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
 ae2:	68 94       	set
 ae4:	b1 11       	cpse	r27, r1
 ae6:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_szero>
 aea:	08 95       	ret

00000aec <__fixunssfsi>:
 aec:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_splitA>
 af0:	88 f0       	brcs	.+34     	; 0xb14 <__fixunssfsi+0x28>
 af2:	9f 57       	subi	r25, 0x7F	; 127
 af4:	98 f0       	brcs	.+38     	; 0xb1c <__fixunssfsi+0x30>
 af6:	b9 2f       	mov	r27, r25
 af8:	99 27       	eor	r25, r25
 afa:	b7 51       	subi	r27, 0x17	; 23
 afc:	b0 f0       	brcs	.+44     	; 0xb2a <__fixunssfsi+0x3e>
 afe:	e1 f0       	breq	.+56     	; 0xb38 <__fixunssfsi+0x4c>
 b00:	66 0f       	add	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	88 1f       	adc	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	1a f0       	brmi	.+6      	; 0xb10 <__fixunssfsi+0x24>
 b0a:	ba 95       	dec	r27
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__fixunssfsi+0x14>
 b0e:	14 c0       	rjmp	.+40     	; 0xb38 <__fixunssfsi+0x4c>
 b10:	b1 30       	cpi	r27, 0x01	; 1
 b12:	91 f0       	breq	.+36     	; 0xb38 <__fixunssfsi+0x4c>
 b14:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_zero>
 b18:	b1 e0       	ldi	r27, 0x01	; 1
 b1a:	08 95       	ret
 b1c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_zero>
 b20:	67 2f       	mov	r22, r23
 b22:	78 2f       	mov	r23, r24
 b24:	88 27       	eor	r24, r24
 b26:	b8 5f       	subi	r27, 0xF8	; 248
 b28:	39 f0       	breq	.+14     	; 0xb38 <__fixunssfsi+0x4c>
 b2a:	b9 3f       	cpi	r27, 0xF9	; 249
 b2c:	cc f3       	brlt	.-14     	; 0xb20 <__fixunssfsi+0x34>
 b2e:	86 95       	lsr	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	b3 95       	inc	r27
 b36:	d9 f7       	brne	.-10     	; 0xb2e <__fixunssfsi+0x42>
 b38:	3e f4       	brtc	.+14     	; 0xb48 <__fixunssfsi+0x5c>
 b3a:	90 95       	com	r25
 b3c:	80 95       	com	r24
 b3e:	70 95       	com	r23
 b40:	61 95       	neg	r22
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	08 95       	ret

00000b4a <__floatunsisf>:
 b4a:	e8 94       	clt
 b4c:	09 c0       	rjmp	.+18     	; 0xb60 <__floatsisf+0x12>

00000b4e <__floatsisf>:
 b4e:	97 fb       	bst	r25, 7
 b50:	3e f4       	brtc	.+14     	; 0xb60 <__floatsisf+0x12>
 b52:	90 95       	com	r25
 b54:	80 95       	com	r24
 b56:	70 95       	com	r23
 b58:	61 95       	neg	r22
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	8f 4f       	sbci	r24, 0xFF	; 255
 b5e:	9f 4f       	sbci	r25, 0xFF	; 255
 b60:	99 23       	and	r25, r25
 b62:	a9 f0       	breq	.+42     	; 0xb8e <__floatsisf+0x40>
 b64:	f9 2f       	mov	r31, r25
 b66:	96 e9       	ldi	r25, 0x96	; 150
 b68:	bb 27       	eor	r27, r27
 b6a:	93 95       	inc	r25
 b6c:	f6 95       	lsr	r31
 b6e:	87 95       	ror	r24
 b70:	77 95       	ror	r23
 b72:	67 95       	ror	r22
 b74:	b7 95       	ror	r27
 b76:	f1 11       	cpse	r31, r1
 b78:	f8 cf       	rjmp	.-16     	; 0xb6a <__floatsisf+0x1c>
 b7a:	fa f4       	brpl	.+62     	; 0xbba <__floatsisf+0x6c>
 b7c:	bb 0f       	add	r27, r27
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__floatsisf+0x36>
 b80:	60 ff       	sbrs	r22, 0
 b82:	1b c0       	rjmp	.+54     	; 0xbba <__floatsisf+0x6c>
 b84:	6f 5f       	subi	r22, 0xFF	; 255
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	8f 4f       	sbci	r24, 0xFF	; 255
 b8a:	9f 4f       	sbci	r25, 0xFF	; 255
 b8c:	16 c0       	rjmp	.+44     	; 0xbba <__floatsisf+0x6c>
 b8e:	88 23       	and	r24, r24
 b90:	11 f0       	breq	.+4      	; 0xb96 <__floatsisf+0x48>
 b92:	96 e9       	ldi	r25, 0x96	; 150
 b94:	11 c0       	rjmp	.+34     	; 0xbb8 <__floatsisf+0x6a>
 b96:	77 23       	and	r23, r23
 b98:	21 f0       	breq	.+8      	; 0xba2 <__floatsisf+0x54>
 b9a:	9e e8       	ldi	r25, 0x8E	; 142
 b9c:	87 2f       	mov	r24, r23
 b9e:	76 2f       	mov	r23, r22
 ba0:	05 c0       	rjmp	.+10     	; 0xbac <__floatsisf+0x5e>
 ba2:	66 23       	and	r22, r22
 ba4:	71 f0       	breq	.+28     	; 0xbc2 <__floatsisf+0x74>
 ba6:	96 e8       	ldi	r25, 0x86	; 134
 ba8:	86 2f       	mov	r24, r22
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	2a f0       	brmi	.+10     	; 0xbba <__floatsisf+0x6c>
 bb0:	9a 95       	dec	r25
 bb2:	66 0f       	add	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	da f7       	brpl	.-10     	; 0xbb0 <__floatsisf+0x62>
 bba:	88 0f       	add	r24, r24
 bbc:	96 95       	lsr	r25
 bbe:	87 95       	ror	r24
 bc0:	97 f9       	bld	r25, 7
 bc2:	08 95       	ret

00000bc4 <__fp_inf>:
 bc4:	97 f9       	bld	r25, 7
 bc6:	9f 67       	ori	r25, 0x7F	; 127
 bc8:	80 e8       	ldi	r24, 0x80	; 128
 bca:	70 e0       	ldi	r23, 0x00	; 0
 bcc:	60 e0       	ldi	r22, 0x00	; 0
 bce:	08 95       	ret

00000bd0 <__fp_nan>:
 bd0:	9f ef       	ldi	r25, 0xFF	; 255
 bd2:	80 ec       	ldi	r24, 0xC0	; 192
 bd4:	08 95       	ret

00000bd6 <__fp_pscA>:
 bd6:	00 24       	eor	r0, r0
 bd8:	0a 94       	dec	r0
 bda:	16 16       	cp	r1, r22
 bdc:	17 06       	cpc	r1, r23
 bde:	18 06       	cpc	r1, r24
 be0:	09 06       	cpc	r0, r25
 be2:	08 95       	ret

00000be4 <__fp_pscB>:
 be4:	00 24       	eor	r0, r0
 be6:	0a 94       	dec	r0
 be8:	12 16       	cp	r1, r18
 bea:	13 06       	cpc	r1, r19
 bec:	14 06       	cpc	r1, r20
 bee:	05 06       	cpc	r0, r21
 bf0:	08 95       	ret

00000bf2 <__fp_round>:
 bf2:	09 2e       	mov	r0, r25
 bf4:	03 94       	inc	r0
 bf6:	00 0c       	add	r0, r0
 bf8:	11 f4       	brne	.+4      	; 0xbfe <__fp_round+0xc>
 bfa:	88 23       	and	r24, r24
 bfc:	52 f0       	brmi	.+20     	; 0xc12 <__fp_round+0x20>
 bfe:	bb 0f       	add	r27, r27
 c00:	40 f4       	brcc	.+16     	; 0xc12 <__fp_round+0x20>
 c02:	bf 2b       	or	r27, r31
 c04:	11 f4       	brne	.+4      	; 0xc0a <__fp_round+0x18>
 c06:	60 ff       	sbrs	r22, 0
 c08:	04 c0       	rjmp	.+8      	; 0xc12 <__fp_round+0x20>
 c0a:	6f 5f       	subi	r22, 0xFF	; 255
 c0c:	7f 4f       	sbci	r23, 0xFF	; 255
 c0e:	8f 4f       	sbci	r24, 0xFF	; 255
 c10:	9f 4f       	sbci	r25, 0xFF	; 255
 c12:	08 95       	ret

00000c14 <__fp_split3>:
 c14:	57 fd       	sbrc	r21, 7
 c16:	90 58       	subi	r25, 0x80	; 128
 c18:	44 0f       	add	r20, r20
 c1a:	55 1f       	adc	r21, r21
 c1c:	59 f0       	breq	.+22     	; 0xc34 <__fp_splitA+0x10>
 c1e:	5f 3f       	cpi	r21, 0xFF	; 255
 c20:	71 f0       	breq	.+28     	; 0xc3e <__fp_splitA+0x1a>
 c22:	47 95       	ror	r20

00000c24 <__fp_splitA>:
 c24:	88 0f       	add	r24, r24
 c26:	97 fb       	bst	r25, 7
 c28:	99 1f       	adc	r25, r25
 c2a:	61 f0       	breq	.+24     	; 0xc44 <__fp_splitA+0x20>
 c2c:	9f 3f       	cpi	r25, 0xFF	; 255
 c2e:	79 f0       	breq	.+30     	; 0xc4e <__fp_splitA+0x2a>
 c30:	87 95       	ror	r24
 c32:	08 95       	ret
 c34:	12 16       	cp	r1, r18
 c36:	13 06       	cpc	r1, r19
 c38:	14 06       	cpc	r1, r20
 c3a:	55 1f       	adc	r21, r21
 c3c:	f2 cf       	rjmp	.-28     	; 0xc22 <__fp_split3+0xe>
 c3e:	46 95       	lsr	r20
 c40:	f1 df       	rcall	.-30     	; 0xc24 <__fp_splitA>
 c42:	08 c0       	rjmp	.+16     	; 0xc54 <__fp_splitA+0x30>
 c44:	16 16       	cp	r1, r22
 c46:	17 06       	cpc	r1, r23
 c48:	18 06       	cpc	r1, r24
 c4a:	99 1f       	adc	r25, r25
 c4c:	f1 cf       	rjmp	.-30     	; 0xc30 <__fp_splitA+0xc>
 c4e:	86 95       	lsr	r24
 c50:	71 05       	cpc	r23, r1
 c52:	61 05       	cpc	r22, r1
 c54:	08 94       	sec
 c56:	08 95       	ret

00000c58 <__fp_zero>:
 c58:	e8 94       	clt

00000c5a <__fp_szero>:
 c5a:	bb 27       	eor	r27, r27
 c5c:	66 27       	eor	r22, r22
 c5e:	77 27       	eor	r23, r23
 c60:	cb 01       	movw	r24, r22
 c62:	97 f9       	bld	r25, 7
 c64:	08 95       	ret
 c66:	16 f0       	brts	.+4      	; 0xc6c <__fp_szero+0x12>
 c68:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_mpack>
 c6c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_nan>
 c70:	68 94       	set
 c72:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>

00000c76 <log>:
 c76:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_splitA>
 c7a:	a8 f3       	brcs	.-22     	; 0xc66 <__fp_szero+0xc>
 c7c:	99 23       	and	r25, r25
 c7e:	c1 f3       	breq	.-16     	; 0xc70 <__fp_szero+0x16>
 c80:	ae f3       	brts	.-22     	; 0xc6c <__fp_szero+0x12>
 c82:	df 93       	push	r29
 c84:	cf 93       	push	r28
 c86:	1f 93       	push	r17
 c88:	0f 93       	push	r16
 c8a:	ff 92       	push	r15
 c8c:	c9 2f       	mov	r28, r25
 c8e:	dd 27       	eor	r29, r29
 c90:	88 23       	and	r24, r24
 c92:	2a f0       	brmi	.+10     	; 0xc9e <log+0x28>
 c94:	21 97       	sbiw	r28, 0x01	; 1
 c96:	66 0f       	add	r22, r22
 c98:	77 1f       	adc	r23, r23
 c9a:	88 1f       	adc	r24, r24
 c9c:	da f7       	brpl	.-10     	; 0xc94 <log+0x1e>
 c9e:	20 e0       	ldi	r18, 0x00	; 0
 ca0:	30 e0       	ldi	r19, 0x00	; 0
 ca2:	40 e8       	ldi	r20, 0x80	; 128
 ca4:	5f eb       	ldi	r21, 0xBF	; 191
 ca6:	9f e3       	ldi	r25, 0x3F	; 63
 ca8:	88 39       	cpi	r24, 0x98	; 152
 caa:	20 f0       	brcs	.+8      	; 0xcb4 <log+0x3e>
 cac:	80 3e       	cpi	r24, 0xE0	; 224
 cae:	38 f0       	brcs	.+14     	; 0xcbe <log+0x48>
 cb0:	21 96       	adiw	r28, 0x01	; 1
 cb2:	8f 77       	andi	r24, 0x7F	; 127
 cb4:	0e 94 91 04 	call	0x922	; 0x922 <__addsf3>
 cb8:	e4 eb       	ldi	r30, 0xB4	; 180
 cba:	f0 e0       	ldi	r31, 0x00	; 0
 cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <log+0x50>
 cbe:	0e 94 91 04 	call	0x922	; 0x922 <__addsf3>
 cc2:	e1 ee       	ldi	r30, 0xE1	; 225
 cc4:	f0 e0       	ldi	r31, 0x00	; 0
 cc6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fp_powser>
 cca:	8b 01       	movw	r16, r22
 ccc:	be 01       	movw	r22, r28
 cce:	ec 01       	movw	r28, r24
 cd0:	fb 2e       	mov	r15, r27
 cd2:	6f 57       	subi	r22, 0x7F	; 127
 cd4:	71 09       	sbc	r23, r1
 cd6:	75 95       	asr	r23
 cd8:	77 1f       	adc	r23, r23
 cda:	88 0b       	sbc	r24, r24
 cdc:	99 0b       	sbc	r25, r25
 cde:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__floatsisf>
 ce2:	28 e1       	ldi	r18, 0x18	; 24
 ce4:	32 e7       	ldi	r19, 0x72	; 114
 ce6:	41 e3       	ldi	r20, 0x31	; 49
 ce8:	5f e3       	ldi	r21, 0x3F	; 63
 cea:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3x>
 cee:	af 2d       	mov	r26, r15
 cf0:	98 01       	movw	r18, r16
 cf2:	ae 01       	movw	r20, r28
 cf4:	ff 90       	pop	r15
 cf6:	0f 91       	pop	r16
 cf8:	1f 91       	pop	r17
 cfa:	cf 91       	pop	r28
 cfc:	df 91       	pop	r29
 cfe:	0e 94 a8 04 	call	0x950	; 0x950 <__addsf3x>
 d02:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_round>

00000d06 <__mulsf3>:
 d06:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3x>
 d0a:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_round>
 d0e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_pscA>
 d12:	38 f0       	brcs	.+14     	; 0xd22 <__mulsf3+0x1c>
 d14:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_pscB>
 d18:	20 f0       	brcs	.+8      	; 0xd22 <__mulsf3+0x1c>
 d1a:	95 23       	and	r25, r21
 d1c:	11 f0       	breq	.+4      	; 0xd22 <__mulsf3+0x1c>
 d1e:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
 d22:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_nan>
 d26:	11 24       	eor	r1, r1
 d28:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_szero>

00000d2c <__mulsf3x>:
 d2c:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fp_split3>
 d30:	70 f3       	brcs	.-36     	; 0xd0e <__mulsf3+0x8>

00000d32 <__mulsf3_pse>:
 d32:	95 9f       	mul	r25, r21
 d34:	c1 f3       	breq	.-16     	; 0xd26 <__mulsf3+0x20>
 d36:	95 0f       	add	r25, r21
 d38:	50 e0       	ldi	r21, 0x00	; 0
 d3a:	55 1f       	adc	r21, r21
 d3c:	62 9f       	mul	r22, r18
 d3e:	f0 01       	movw	r30, r0
 d40:	72 9f       	mul	r23, r18
 d42:	bb 27       	eor	r27, r27
 d44:	f0 0d       	add	r31, r0
 d46:	b1 1d       	adc	r27, r1
 d48:	63 9f       	mul	r22, r19
 d4a:	aa 27       	eor	r26, r26
 d4c:	f0 0d       	add	r31, r0
 d4e:	b1 1d       	adc	r27, r1
 d50:	aa 1f       	adc	r26, r26
 d52:	64 9f       	mul	r22, r20
 d54:	66 27       	eor	r22, r22
 d56:	b0 0d       	add	r27, r0
 d58:	a1 1d       	adc	r26, r1
 d5a:	66 1f       	adc	r22, r22
 d5c:	82 9f       	mul	r24, r18
 d5e:	22 27       	eor	r18, r18
 d60:	b0 0d       	add	r27, r0
 d62:	a1 1d       	adc	r26, r1
 d64:	62 1f       	adc	r22, r18
 d66:	73 9f       	mul	r23, r19
 d68:	b0 0d       	add	r27, r0
 d6a:	a1 1d       	adc	r26, r1
 d6c:	62 1f       	adc	r22, r18
 d6e:	83 9f       	mul	r24, r19
 d70:	a0 0d       	add	r26, r0
 d72:	61 1d       	adc	r22, r1
 d74:	22 1f       	adc	r18, r18
 d76:	74 9f       	mul	r23, r20
 d78:	33 27       	eor	r19, r19
 d7a:	a0 0d       	add	r26, r0
 d7c:	61 1d       	adc	r22, r1
 d7e:	23 1f       	adc	r18, r19
 d80:	84 9f       	mul	r24, r20
 d82:	60 0d       	add	r22, r0
 d84:	21 1d       	adc	r18, r1
 d86:	82 2f       	mov	r24, r18
 d88:	76 2f       	mov	r23, r22
 d8a:	6a 2f       	mov	r22, r26
 d8c:	11 24       	eor	r1, r1
 d8e:	9f 57       	subi	r25, 0x7F	; 127
 d90:	50 40       	sbci	r21, 0x00	; 0
 d92:	9a f0       	brmi	.+38     	; 0xdba <__mulsf3_pse+0x88>
 d94:	f1 f0       	breq	.+60     	; 0xdd2 <__mulsf3_pse+0xa0>
 d96:	88 23       	and	r24, r24
 d98:	4a f0       	brmi	.+18     	; 0xdac <__mulsf3_pse+0x7a>
 d9a:	ee 0f       	add	r30, r30
 d9c:	ff 1f       	adc	r31, r31
 d9e:	bb 1f       	adc	r27, r27
 da0:	66 1f       	adc	r22, r22
 da2:	77 1f       	adc	r23, r23
 da4:	88 1f       	adc	r24, r24
 da6:	91 50       	subi	r25, 0x01	; 1
 da8:	50 40       	sbci	r21, 0x00	; 0
 daa:	a9 f7       	brne	.-22     	; 0xd96 <__mulsf3_pse+0x64>
 dac:	9e 3f       	cpi	r25, 0xFE	; 254
 dae:	51 05       	cpc	r21, r1
 db0:	80 f0       	brcs	.+32     	; 0xdd2 <__mulsf3_pse+0xa0>
 db2:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
 db6:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_szero>
 dba:	5f 3f       	cpi	r21, 0xFF	; 255
 dbc:	e4 f3       	brlt	.-8      	; 0xdb6 <__mulsf3_pse+0x84>
 dbe:	98 3e       	cpi	r25, 0xE8	; 232
 dc0:	d4 f3       	brlt	.-12     	; 0xdb6 <__mulsf3_pse+0x84>
 dc2:	86 95       	lsr	r24
 dc4:	77 95       	ror	r23
 dc6:	67 95       	ror	r22
 dc8:	b7 95       	ror	r27
 dca:	f7 95       	ror	r31
 dcc:	e7 95       	ror	r30
 dce:	9f 5f       	subi	r25, 0xFF	; 255
 dd0:	c1 f7       	brne	.-16     	; 0xdc2 <__mulsf3_pse+0x90>
 dd2:	fe 2b       	or	r31, r30
 dd4:	88 0f       	add	r24, r24
 dd6:	91 1d       	adc	r25, r1
 dd8:	96 95       	lsr	r25
 dda:	87 95       	ror	r24
 ddc:	97 f9       	bld	r25, 7
 dde:	08 95       	ret

00000de0 <__fp_mpack>:
 de0:	9f 3f       	cpi	r25, 0xFF	; 255
 de2:	31 f0       	breq	.+12     	; 0xdf0 <__fp_mpack_finite+0xc>

00000de4 <__fp_mpack_finite>:
 de4:	91 50       	subi	r25, 0x01	; 1
 de6:	20 f4       	brcc	.+8      	; 0xdf0 <__fp_mpack_finite+0xc>
 de8:	87 95       	ror	r24
 dea:	77 95       	ror	r23
 dec:	67 95       	ror	r22
 dee:	b7 95       	ror	r27
 df0:	88 0f       	add	r24, r24
 df2:	91 1d       	adc	r25, r1
 df4:	96 95       	lsr	r25
 df6:	87 95       	ror	r24
 df8:	97 f9       	bld	r25, 7
 dfa:	08 95       	ret

00000dfc <__fp_powser>:
 dfc:	df 93       	push	r29
 dfe:	cf 93       	push	r28
 e00:	1f 93       	push	r17
 e02:	0f 93       	push	r16
 e04:	ff 92       	push	r15
 e06:	ef 92       	push	r14
 e08:	df 92       	push	r13
 e0a:	7b 01       	movw	r14, r22
 e0c:	8c 01       	movw	r16, r24
 e0e:	68 94       	set
 e10:	06 c0       	rjmp	.+12     	; 0xe1e <__fp_powser+0x22>
 e12:	da 2e       	mov	r13, r26
 e14:	ef 01       	movw	r28, r30
 e16:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3x>
 e1a:	fe 01       	movw	r30, r28
 e1c:	e8 94       	clt
 e1e:	a5 91       	lpm	r26, Z+
 e20:	25 91       	lpm	r18, Z+
 e22:	35 91       	lpm	r19, Z+
 e24:	45 91       	lpm	r20, Z+
 e26:	55 91       	lpm	r21, Z+
 e28:	a6 f3       	brts	.-24     	; 0xe12 <__fp_powser+0x16>
 e2a:	ef 01       	movw	r28, r30
 e2c:	0e 94 a8 04 	call	0x950	; 0x950 <__addsf3x>
 e30:	fe 01       	movw	r30, r28
 e32:	97 01       	movw	r18, r14
 e34:	a8 01       	movw	r20, r16
 e36:	da 94       	dec	r13
 e38:	69 f7       	brne	.-38     	; 0xe14 <__fp_powser+0x18>
 e3a:	df 90       	pop	r13
 e3c:	ef 90       	pop	r14
 e3e:	ff 90       	pop	r15
 e40:	0f 91       	pop	r16
 e42:	1f 91       	pop	r17
 e44:	cf 91       	pop	r28
 e46:	df 91       	pop	r29
 e48:	08 95       	ret

00000e4a <__udivmodsi4>:
 e4a:	a1 e2       	ldi	r26, 0x21	; 33
 e4c:	1a 2e       	mov	r1, r26
 e4e:	aa 1b       	sub	r26, r26
 e50:	bb 1b       	sub	r27, r27
 e52:	fd 01       	movw	r30, r26
 e54:	0d c0       	rjmp	.+26     	; 0xe70 <__udivmodsi4_ep>

00000e56 <__udivmodsi4_loop>:
 e56:	aa 1f       	adc	r26, r26
 e58:	bb 1f       	adc	r27, r27
 e5a:	ee 1f       	adc	r30, r30
 e5c:	ff 1f       	adc	r31, r31
 e5e:	a2 17       	cp	r26, r18
 e60:	b3 07       	cpc	r27, r19
 e62:	e4 07       	cpc	r30, r20
 e64:	f5 07       	cpc	r31, r21
 e66:	20 f0       	brcs	.+8      	; 0xe70 <__udivmodsi4_ep>
 e68:	a2 1b       	sub	r26, r18
 e6a:	b3 0b       	sbc	r27, r19
 e6c:	e4 0b       	sbc	r30, r20
 e6e:	f5 0b       	sbc	r31, r21

00000e70 <__udivmodsi4_ep>:
 e70:	66 1f       	adc	r22, r22
 e72:	77 1f       	adc	r23, r23
 e74:	88 1f       	adc	r24, r24
 e76:	99 1f       	adc	r25, r25
 e78:	1a 94       	dec	r1
 e7a:	69 f7       	brne	.-38     	; 0xe56 <__udivmodsi4_loop>
 e7c:	60 95       	com	r22
 e7e:	70 95       	com	r23
 e80:	80 95       	com	r24
 e82:	90 95       	com	r25
 e84:	9b 01       	movw	r18, r22
 e86:	ac 01       	movw	r20, r24
 e88:	bd 01       	movw	r22, r26
 e8a:	cf 01       	movw	r24, r30
 e8c:	08 95       	ret

00000e8e <_exit>:
 e8e:	f8 94       	cli

00000e90 <__stop_program>:
 e90:	ff cf       	rjmp	.-2      	; 0xe90 <__stop_program>

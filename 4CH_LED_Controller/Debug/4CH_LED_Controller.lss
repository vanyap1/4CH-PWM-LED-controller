
4CH_LED_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  0080011c  0080011c  00000e48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029d8  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d5  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018a2  00000000  00000000  00004f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c0  00000000  00000000  000067c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b65  00000000  00000000  00006e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c01  00000000  00000000  000079e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  000095e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_18>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_20>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_21>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  60:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_24>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  9c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_39>
  a0:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_40>
  a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__divsf3+0x8>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d8 e0       	ldi	r29, 0x08	; 8
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	e8 e9       	ldi	r30, 0x98	; 152
 122:	fd e0       	ldi	r31, 0x0D	; 13
 124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
 126:	05 90       	lpm	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	ac 31       	cpi	r26, 0x1C	; 28
 12c:	b1 07       	cpc	r27, r17
 12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	ac e1       	ldi	r26, 0x1C	; 28
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
 138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
 13a:	ae 3a       	cpi	r26, 0xAE	; 174
 13c:	b2 07       	cpc	r27, r18
 13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
 140:	0e 94 44 03 	call	0x688	; 0x688 <main>
 144:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <_exit>

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <__vector_21>:
void adc_pin_enable(uint8_t pin){
	DIDR0 |= 1 << pin;
}

void adc_pin_disable(uint8_t pin){
	DIDR0 &= ~(1 << pin);
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <adc_init>:
 16a:	ec e7       	ldi	r30, 0x7C	; 124
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	8f 68       	ori	r24, 0x8F	; 143
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <adc_pin_select>:
}

void adc_pin_select(uint8_t souce){
	ADMUX &= 0xF0;
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 81       	ld	r25, Z
 186:	90 7f       	andi	r25, 0xF0	; 240
 188:	90 83       	st	Z, r25
	ADMUX |= souce;
 18a:	90 81       	ld	r25, Z
 18c:	89 2b       	or	r24, r25
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret

00000192 <adc_convert>:
}


uint16_t adc_convert(void){
	ADCSRA |= 1 << ADEN;
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	80 83       	st	Z, r24
	uint8_t adcl = 0;
	uint8_t adch = 0;
	
	adc_convert_done = 0;
 19c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	ADCSRA |= 1 << ADSC;
 1a0:	80 81       	ld	r24, Z
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	80 83       	st	Z, r24
	while(adc_convert_done == 0);
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	88 23       	and	r24, r24
 1ac:	e1 f3       	breq	.-8      	; 0x1a6 <adc_convert+0x14>
	
	adcl = ADCL;
 1ae:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	adch = ADCH;
 1b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	ADCSRA &=~ (1 << ADEN);
 1b6:	ea e7       	ldi	r30, 0x7A	; 122
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	90 81       	ld	r25, Z
 1bc:	9f 77       	andi	r25, 0x7F	; 127
 1be:	90 83       	st	Z, r25
	return (adch << 8 | adcl);
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	98 2f       	mov	r25, r24
 1c4:	88 27       	eor	r24, r24
	
	
}
 1c6:	82 2b       	or	r24, r18
 1c8:	08 95       	ret

000001ca <get_adc>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
 1ca:	0e 94 c0 00 	call	0x180	; 0x180 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
 1ce:	0e 94 c9 00 	call	0x192	; 0x192 <adc_convert>
}
 1d2:	08 95       	ret

000001d4 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
	adc_pin_select(source);
 1d4:	0e 94 c0 00 	call	0x180	; 0x180 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
 1d8:	0e 94 c9 00 	call	0x192	; 0x192 <adc_convert>
 1dc:	bc 01       	movw	r22, r24
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 28 05 	call	0xa50	; 0xa50 <__floatunsisf>
 1e6:	2c e6       	ldi	r18, 0x6C	; 108
 1e8:	3b ed       	ldi	r19, 0xDB	; 219
 1ea:	4e e0       	ldi	r20, 0x0E	; 14
 1ec:	52 e4       	ldi	r21, 0x42	; 66
 1ee:	0e 94 06 06 	call	0xc0c	; 0xc0c <__mulsf3>
 1f2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
}
 1f6:	cb 01       	movw	r24, r22
 1f8:	08 95       	ret

000001fa <get_mAmps>:

uint16_t get_mAmps(uint8_t source){
	adc_pin_select(source);
 1fa:	0e 94 c0 00 	call	0x180	; 0x180 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_AMPS(adc_convert());
 1fe:	0e 94 c9 00 	call	0x192	; 0x192 <adc_convert>
 202:	bc 01       	movw	r22, r24
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 28 05 	call	0xa50	; 0xa50 <__floatunsisf>
 20c:	2c ea       	ldi	r18, 0xAC	; 172
 20e:	32 ee       	ldi	r19, 0xE2	; 226
 210:	4b ec       	ldi	r20, 0xCB	; 203
 212:	50 e4       	ldi	r21, 0x40	; 64
 214:	0e 94 06 06 	call	0xc0c	; 0xc0c <__mulsf3>
 218:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
}
 21c:	cb 01       	movw	r24, r22
 21e:	08 95       	ret

00000220 <ADCtoCelsius>:

int16_t getNTC(uint8_t thermalZone){
	return ADCtoCelsius(get_adc(thermalZone));
}

int16_t ADCtoCelsius(uint16_t adcValue) {
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29

	float R2 = R1 / ((ADCResolution - adcValue) / (float)adcValue);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	74 e0       	ldi	r23, 0x04	; 4
 230:	eb 01       	movw	r28, r22
 232:	c8 1b       	sub	r28, r24
 234:	d9 0b       	sbc	r29, r25
 236:	bc 01       	movw	r22, r24
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 28 05 	call	0xa50	; 0xa50 <__floatunsisf>
 240:	6b 01       	movw	r12, r22
 242:	7c 01       	movw	r14, r24
 244:	be 01       	movw	r22, r28
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 28 05 	call	0xa50	; 0xa50 <__floatunsisf>
 24e:	a7 01       	movw	r20, r14
 250:	96 01       	movw	r18, r12
 252:	0e 94 80 04 	call	0x900	; 0x900 <__divsf3>
 256:	9b 01       	movw	r18, r22
 258:	ac 01       	movw	r20, r24
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	70 e4       	ldi	r23, 0x40	; 64
 25e:	8c e1       	ldi	r24, 0x1C	; 28
 260:	96 e4       	ldi	r25, 0x46	; 70
 262:	0e 94 80 04 	call	0x900	; 0x900 <__divsf3>
	float temp = 1.0 / ((log(R2 / R1) / 3950.0) + (1.0 / 298.15)) - 273.15;
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e4       	ldi	r19, 0x40	; 64
 26a:	4c e1       	ldi	r20, 0x1C	; 28
 26c:	56 e4       	ldi	r21, 0x46	; 70
 26e:	0e 94 80 04 	call	0x900	; 0x900 <__divsf3>
 272:	0e 94 be 05 	call	0xb7c	; 0xb7c <log>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 ee       	ldi	r19, 0xE0	; 224
 27a:	46 e7       	ldi	r20, 0x76	; 118
 27c:	55 e4       	ldi	r21, 0x45	; 69
 27e:	0e 94 80 04 	call	0x900	; 0x900 <__divsf3>
 282:	2f e0       	ldi	r18, 0x0F	; 15
 284:	3f ec       	ldi	r19, 0xCF	; 207
 286:	4b e5       	ldi	r20, 0x5B	; 91
 288:	5b e3       	ldi	r21, 0x3B	; 59
 28a:	0e 94 14 04 	call	0x828	; 0x828 <__addsf3>
 28e:	9b 01       	movw	r18, r22
 290:	ac 01       	movw	r20, r24
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	9f e3       	ldi	r25, 0x3F	; 63
 29a:	0e 94 80 04 	call	0x900	; 0x900 <__divsf3>
 29e:	23 e3       	ldi	r18, 0x33	; 51
 2a0:	33 e9       	ldi	r19, 0x93	; 147
 2a2:	48 e8       	ldi	r20, 0x88	; 136
 2a4:	53 e4       	ldi	r21, 0x43	; 67
 2a6:	0e 94 13 04 	call	0x826	; 0x826 <__subsf3>
	return (int16_t)(temp * 10);
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e2       	ldi	r20, 0x20	; 32
 2b0:	51 e4       	ldi	r21, 0x41	; 65
 2b2:	0e 94 06 06 	call	0xc0c	; 0xc0c <__mulsf3>
 2b6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fixsfsi>
 2ba:	cb 01       	movw	r24, r22
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	08 95       	ret

000002ca <getNTC>:
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_AMPS(adc_convert());
}

int16_t getNTC(uint8_t thermalZone){
	return ADCtoCelsius(get_adc(thermalZone));
 2ca:	0e 94 e5 00 	call	0x1ca	; 0x1ca <get_adc>
 2ce:	0e 94 10 01 	call	0x220	; 0x220 <ADCtoCelsius>
}
 2d2:	08 95       	ret

000002d4 <gpio_set_pin_level>:

}


void gpio_set_port_level(gpio *GPIOx, const uint8_t mask){
	*GPIOx->port=mask;
 2d4:	66 23       	and	r22, r22
 2d6:	99 f0       	breq	.+38     	; 0x2fe <gpio_set_pin_level+0x2a>
 2d8:	dc 01       	movw	r26, r24
 2da:	ed 91       	ld	r30, X+
 2dc:	fc 91       	ld	r31, X
 2de:	11 97       	sbiw	r26, 0x01	; 1
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	a9 01       	movw	r20, r18
 2e6:	12 96       	adiw	r26, 0x02	; 2
 2e8:	0c 90       	ld	r0, X
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <gpio_set_pin_level+0x1c>
 2ec:	44 0f       	add	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <gpio_set_pin_level+0x18>
 2f4:	ca 01       	movw	r24, r20
 2f6:	90 81       	ld	r25, Z
 2f8:	89 2b       	or	r24, r25
 2fa:	80 83       	st	Z, r24
 2fc:	08 95       	ret
 2fe:	dc 01       	movw	r26, r24
 300:	ed 91       	ld	r30, X+
 302:	fc 91       	ld	r31, X
 304:	11 97       	sbiw	r26, 0x01	; 1
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	a9 01       	movw	r20, r18
 30c:	12 96       	adiw	r26, 0x02	; 2
 30e:	0c 90       	ld	r0, X
 310:	02 c0       	rjmp	.+4      	; 0x316 <gpio_set_pin_level+0x42>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <gpio_set_pin_level+0x3e>
 31a:	ca 01       	movw	r24, r20
 31c:	80 95       	com	r24
 31e:	90 81       	ld	r25, Z
 320:	89 23       	and	r24, r25
 322:	80 83       	st	Z, r24
 324:	08 95       	ret

00000326 <gpio_set_pin_direction>:
 326:	fc 01       	movw	r30, r24
 328:	30 81       	ld	r19, Z
 32a:	21 81       	ldd	r18, Z+1	; 0x01
 32c:	61 30       	cpi	r22, 0x01	; 1
 32e:	99 f0       	breq	.+38     	; 0x356 <gpio_set_pin_direction+0x30>
 330:	18 f0       	brcs	.+6      	; 0x338 <gpio_set_pin_direction+0x12>
 332:	62 30       	cpi	r22, 0x02	; 2
 334:	f1 f0       	breq	.+60     	; 0x372 <gpio_set_pin_direction+0x4c>
 336:	08 95       	ret
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 80       	ldd	r0, Z+2	; 0x02
 33e:	02 c0       	rjmp	.+4      	; 0x344 <gpio_set_pin_direction+0x1e>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <gpio_set_pin_direction+0x1a>
 348:	e3 2f       	mov	r30, r19
 34a:	f2 2f       	mov	r31, r18
 34c:	80 95       	com	r24
 34e:	92 91       	ld	r25, -Z
 350:	89 23       	and	r24, r25
 352:	80 83       	st	Z, r24
 354:	08 95       	ret
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 80       	ldd	r0, Z+2	; 0x02
 35c:	02 c0       	rjmp	.+4      	; 0x362 <gpio_set_pin_direction+0x3c>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <gpio_set_pin_direction+0x38>
 366:	e3 2f       	mov	r30, r19
 368:	f2 2f       	mov	r31, r18
 36a:	92 91       	ld	r25, -Z
 36c:	89 2b       	or	r24, r25
 36e:	80 83       	st	Z, r24
 370:	08 95       	ret
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	ac 01       	movw	r20, r24
 378:	02 80       	ldd	r0, Z+2	; 0x02
 37a:	02 c0       	rjmp	.+4      	; 0x380 <gpio_set_pin_direction+0x5a>
 37c:	44 0f       	add	r20, r20
 37e:	55 1f       	adc	r21, r21
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <gpio_set_pin_direction+0x56>
 384:	a3 2f       	mov	r26, r19
 386:	b2 2f       	mov	r27, r18
 388:	40 95       	com	r20
 38a:	2e 91       	ld	r18, -X
 38c:	42 23       	and	r20, r18
 38e:	4c 93       	st	X, r20
 390:	a0 81       	ld	r26, Z
 392:	b1 81       	ldd	r27, Z+1	; 0x01
 394:	02 80       	ldd	r0, Z+2	; 0x02
 396:	02 c0       	rjmp	.+4      	; 0x39c <gpio_set_pin_direction+0x76>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <gpio_set_pin_direction+0x72>
 3a0:	80 95       	com	r24
 3a2:	9c 91       	ld	r25, X
 3a4:	89 23       	and	r24, r25
 3a6:	8c 93       	st	X, r24
 3a8:	08 95       	ret

000003aa <gpio_toggle_pin_level>:
}

void gpio_toggle_pin_level(gpio *GPIOx)

{
	uint8_t *tmp_port = GPIOx->port-2;
 3aa:	dc 01       	movw	r26, r24
 3ac:	ed 91       	ld	r30, X+
 3ae:	fc 91       	ld	r31, X
 3b0:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port = 1 << GPIOx->pin;
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	a9 01       	movw	r20, r18
 3b8:	12 96       	adiw	r26, 0x02	; 2
 3ba:	0c 90       	ld	r0, X
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <gpio_toggle_pin_level+0x18>
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <gpio_toggle_pin_level+0x14>
 3c6:	32 97       	sbiw	r30, 0x02	; 2
 3c8:	40 83       	st	Z, r20
 3ca:	08 95       	ret

000003cc <__vector_39>:
gpio spi_ss_pin = {(uint8_t *)&PORTE , PORTE2};




ISR(SPI1_STC_vect){
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	8f 93       	push	r24
	if(SPSR1 & 0x40){
 3d8:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 3dc:	86 ff       	sbrs	r24, 6
 3de:	04 c0       	rjmp	.+8      	; 0x3e8 <__vector_39+0x1c>
		//spi_rx_data = 0;
		spi_txrx_done = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <__vector_39+0x22>
		}else{
		spi_txrx_done = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	}
}
 3ee:	8f 91       	pop	r24
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_24>:
static volatile status = 0xF8;
static uint8_t twiReady;


ISR(TWI0_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	//cli(); // Disable Global Interrupt
	status=TWSR0 & 0xF8; // Get TWI Status Register, mask the prescaler bits (TWPS1,TWPS0)
 40c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 410:	88 7f       	andi	r24, 0xF8	; 248
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <status+0x1>
 418:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
	switch(status) {
 41c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 420:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <status+0x1>
 424:	88 3a       	cpi	r24, 0xA8	; 168
 426:	91 05       	cpc	r25, r1
 428:	31 f1       	breq	.+76     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 42a:	3c f4       	brge	.+14     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 42c:	80 38       	cpi	r24, 0x80	; 128
 42e:	91 05       	cpc	r25, r1
 430:	59 f0       	breq	.+22     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 432:	80 3a       	cpi	r24, 0xA0	; 160
 434:	91 05       	cpc	r25, r1
 436:	c9 f0       	breq	.+50     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 438:	42 c0       	rjmp	.+132    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 43a:	88 3b       	cpi	r24, 0xB8	; 184
 43c:	91 05       	cpc	r25, r1
 43e:	61 f1       	breq	.+88     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 440:	80 3c       	cpi	r24, 0xC0	; 192
 442:	91 05       	cpc	r25, r1
 444:	d1 f1       	breq	.+116    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 446:	3b c0       	rjmp	.+118    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		case TW_SR_SLA_ACK:	// 0x60: SLA+W received, ACK returned
			break;
		case TW_SR_DATA_ACK:	// 0x80: data received, ACK returned
			twi_buff[byteIndex] = TWDR0;	// Save data to the register address
 448:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 44c:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <twi_buff>
 450:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <twi_buff+0x1>
 454:	e8 0f       	add	r30, r24
 456:	f1 1d       	adc	r31, r1
 458:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 45c:	80 83       	st	Z, r24
			byteIndex++;
 45e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 462:	8f 5f       	subi	r24, 0xFF	; 255
 464:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <byteIndex>
		break;
 468:	2a c0       	rjmp	.+84     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			case TW_SR_STOP:	// 0xA0: stop or repeated start condition received while selected
			twiReady = 1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <twiReady>
			byteIndex = 0;
 470:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <byteIndex>
		break;
 474:	24 c0       	rjmp	.+72     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			case TW_ST_SLA_ACK:	// 0xA8: SLA+R received, ACK returned {ADDRESS REGISTER or first byte in slave mode}
			TWDR0 = twi_buff[byteIndex];
 476:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 47a:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <twi_buff>
 47e:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <twi_buff+0x1>
 482:	e8 0f       	add	r30, r24
 484:	f1 1d       	adc	r31, r1
 486:	80 81       	ld	r24, Z
 488:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			byteIndex++;
 48c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 490:	8f 5f       	subi	r24, 0xFF	; 255
 492:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <byteIndex>
			break;
 496:	13 c0       	rjmp	.+38     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		case TW_ST_DATA_ACK:	// 0xB8: data transmitted, ACK received
			TWDR0 = twi_buff[byteIndex];
 498:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 49c:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <twi_buff>
 4a0:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <twi_buff+0x1>
 4a4:	e8 0f       	add	r30, r24
 4a6:	f1 1d       	adc	r31, r1
 4a8:	80 81       	ld	r24, Z
 4aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			byteIndex++;
 4ae:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <byteIndex>
			break;
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		case TW_ST_DATA_NACK:	// 0xC0: data transmitted, NACK received
			byteIndex = 0;
 4ba:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <byteIndex>
		case TW_BUS_ERROR:	// 0x00: illegal start or stop condition
			break;
		default:
			break;
	}
	if (twi_mode){TWCR0 |= (1<<TWINT);}// Clear TWINT Flag
 4be:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <twi_mode>
 4c2:	88 23       	and	r24, r24
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4c6:	ec eb       	ldi	r30, 0xBC	; 188
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	80 68       	ori	r24, 0x80	; 128
 4ce:	80 83       	st	Z, r24
	//sei(); // Enable Global Interrupt
}
 4d0:	ff 91       	pop	r31
 4d2:	ef 91       	pop	r30
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__vector_40>:
	
	
	twi1_stop();
	
	return err;
}
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
 4f4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
 4f8:	88 7f       	andi	r24, 0xF8	; 248
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <status+0x1>
 500:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
 504:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
 508:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <status+0x1>
 50c:	88 3a       	cpi	r24, 0xA8	; 168
 50e:	91 05       	cpc	r25, r1
 510:	31 f1       	breq	.+76     	; 0x55e <__vector_40+0x7c>
 512:	3c f4       	brge	.+14     	; 0x522 <__vector_40+0x40>
 514:	80 38       	cpi	r24, 0x80	; 128
 516:	91 05       	cpc	r25, r1
 518:	59 f0       	breq	.+22     	; 0x530 <__vector_40+0x4e>
 51a:	80 3a       	cpi	r24, 0xA0	; 160
 51c:	91 05       	cpc	r25, r1
 51e:	c9 f0       	breq	.+50     	; 0x552 <__vector_40+0x70>
 520:	42 c0       	rjmp	.+132    	; 0x5a6 <__vector_40+0xc4>
 522:	88 3b       	cpi	r24, 0xB8	; 184
 524:	91 05       	cpc	r25, r1
 526:	61 f1       	breq	.+88     	; 0x580 <__vector_40+0x9e>
 528:	80 3c       	cpi	r24, 0xC0	; 192
 52a:	91 05       	cpc	r25, r1
 52c:	d1 f1       	breq	.+116    	; 0x5a2 <__vector_40+0xc0>
 52e:	3b c0       	rjmp	.+118    	; 0x5a6 <__vector_40+0xc4>
 530:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 534:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <twi_buff>
 538:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <twi_buff+0x1>
 53c:	e8 0f       	add	r30, r24
 53e:	f1 1d       	adc	r31, r1
 540:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
 544:	80 83       	st	Z, r24
 546:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 54a:	8f 5f       	subi	r24, 0xFF	; 255
 54c:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <byteIndex>
 550:	2a c0       	rjmp	.+84     	; 0x5a6 <__vector_40+0xc4>
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <twiReady>
 558:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <byteIndex>
 55c:	24 c0       	rjmp	.+72     	; 0x5a6 <__vector_40+0xc4>
 55e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 562:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <twi_buff>
 566:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <twi_buff+0x1>
 56a:	e8 0f       	add	r30, r24
 56c:	f1 1d       	adc	r31, r1
 56e:	80 81       	ld	r24, Z
 570:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
 574:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 578:	8f 5f       	subi	r24, 0xFF	; 255
 57a:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <byteIndex>
 57e:	13 c0       	rjmp	.+38     	; 0x5a6 <__vector_40+0xc4>
 580:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 584:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <twi_buff>
 588:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <twi_buff+0x1>
 58c:	e8 0f       	add	r30, r24
 58e:	f1 1d       	adc	r31, r1
 590:	80 81       	ld	r24, Z
 592:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
 596:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <byteIndex>
 59a:	8f 5f       	subi	r24, 0xFF	; 255
 59c:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <byteIndex>
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__vector_40+0xc4>
 5a2:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <byteIndex>
 5a6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <twi_mode>
 5aa:	88 23       	and	r24, r24
 5ac:	29 f0       	breq	.+10     	; 0x5b8 <__vector_40+0xd6>
 5ae:	ec ed       	ldi	r30, 0xDC	; 220
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	80 68       	ori	r24, 0x80	; 128
 5b6:	80 83       	st	Z, r24
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <twi1_init>:




void twi1_init(uint32_t speed){
 5ca:	9b 01       	movw	r18, r22
 5cc:	ac 01       	movw	r20, r24
	twi_mode = 0;
 5ce:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <twi_mode>
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	74 e2       	ldi	r23, 0x24	; 36
 5d6:	84 ef       	ldi	r24, 0xF4	; 244
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 a8 06 	call	0xd50	; 0xd50 <__udivmodsi4>
 5de:	da 01       	movw	r26, r20
 5e0:	c9 01       	movw	r24, r18
 5e2:	40 97       	sbiw	r24, 0x10	; 16
 5e4:	a1 09       	sbc	r26, r1
 5e6:	b1 09       	sbc	r27, r1
 5e8:	b6 95       	lsr	r27
 5ea:	a7 95       	ror	r26
 5ec:	97 95       	ror	r25
 5ee:	87 95       	ror	r24
	TWBR1 = gen_t & 0xFF;
 5f0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
 5f4:	85 e0       	ldi	r24, 0x05	; 5
 5f6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 5fa:	08 95       	ret

000005fc <__vector_18>:
	read_complete = false;
	rx_count=0;
	return test_array;
}

ISR(USART0_RX_vect){
 5fc:	1f 92       	push	r1
 5fe:	0f 92       	push	r0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	0f 92       	push	r0
 604:	11 24       	eor	r1, r1
 606:	8f 93       	push	r24
 608:	9f 93       	push	r25
 60a:	ef 93       	push	r30
 60c:	ff 93       	push	r31
	
	//volatile static uint16_t rx_write_pos = 0;
	test_array[rx_count] = UDR0;
 60e:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <rx_count>
 612:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <rx_count+0x1>
 616:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 61a:	ef 5d       	subi	r30, 0xDF	; 223
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	80 83       	st	Z, r24
	if (test_array[rx_count] == 0x0D){
 620:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <rx_count>
 624:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <rx_count+0x1>
 628:	ef 5d       	subi	r30, 0xDF	; 223
 62a:	fe 4f       	sbci	r31, 0xFE	; 254
 62c:	80 81       	ld	r24, Z
 62e:	8d 30       	cpi	r24, 0x0D	; 13
 630:	51 f4       	brne	.+20     	; 0x646 <__vector_18+0x4a>
		read_complete = true;
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <read_complete>
		test_array[rx_count+1] = 0;
 638:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <rx_count>
 63c:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <rx_count+0x1>
 640:	ee 5d       	subi	r30, 0xDE	; 222
 642:	fe 4f       	sbci	r31, 0xFE	; 254
 644:	10 82       	st	Z, r1
	}
	rx_count +=1;
 646:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <rx_count>
 64a:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <rx_count+0x1>
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <rx_count+0x1>
 654:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <rx_count>
	
}
 658:	ff 91       	pop	r31
 65a:	ef 91       	pop	r30
 65c:	9f 91       	pop	r25
 65e:	8f 91       	pop	r24
 660:	0f 90       	pop	r0
 662:	0f be       	out	0x3f, r0	; 63
 664:	0f 90       	pop	r0
 666:	1f 90       	pop	r1
 668:	18 95       	reti

0000066a <__vector_20>:

//memset(rx_buffer, 0, sizeof(rx_buffer));

ISR(USART0_TX_vect){
 66a:	1f 92       	push	r1
 66c:	0f 92       	push	r0
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	0f 92       	push	r0
 672:	11 24       	eor	r1, r1
 674:	8f 93       	push	r24
	uart_tx_busy = 1;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uart_tx_busy>
}
 67c:	8f 91       	pop	r24
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <main>:
	
	
int main(void)
{
	//uart_init(250000, 1);
	twi1_init(400000);
 688:	60 e8       	ldi	r22, 0x80	; 128
 68a:	7a e1       	ldi	r23, 0x1A	; 26
 68c:	86 e0       	ldi	r24, 0x06	; 6
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 e5 02 	call	0x5ca	; 0x5ca <twi1_init>
	
	gpio_set_pin_direction(&drvEn , PORT_DIR_OUT); gpio_set_pin_level(&drvEn, true);
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	89 e1       	ldi	r24, 0x19	; 25
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	89 e1       	ldi	r24, 0x19	; 25
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ledRun , PORT_DIR_OUT); gpio_set_pin_level(&ledRun, false);
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	86 e1       	ldi	r24, 0x16	; 22
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	86 e1       	ldi	r24, 0x16	; 22
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ledFail , PORT_DIR_OUT); gpio_set_pin_level(&ledFail, false);
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	83 e1       	ldi	r24, 0x13	; 19
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	83 e1       	ldi	r24, 0x13	; 19
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	
	gpio_set_pin_direction(&ch1Config , PORT_DIR_OUT); gpio_set_pin_level(&ch1Config, false);
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	80 e1       	ldi	r24, 0x10	; 16
 6d4:	91 e0       	ldi	r25, 0x01	; 1
 6d6:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	80 e1       	ldi	r24, 0x10	; 16
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ch2Config , PORT_DIR_OUT); gpio_set_pin_level(&ch2Config, false);
 6e4:	61 e0       	ldi	r22, 0x01	; 1
 6e6:	8d e0       	ldi	r24, 0x0D	; 13
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	8d e0       	ldi	r24, 0x0D	; 13
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ch3Config , PORT_DIR_OUT); gpio_set_pin_level(&ch3Config, false);
 6f8:	61 e0       	ldi	r22, 0x01	; 1
 6fa:	8a e0       	ldi	r24, 0x0A	; 10
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	8a e0       	ldi	r24, 0x0A	; 10
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
	gpio_set_pin_direction(&ch4Config , PORT_DIR_OUT); gpio_set_pin_level(&ch4Config, false);
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	87 e0       	ldi	r24, 0x07	; 7
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 93 01 	call	0x326	; 0x326 <gpio_set_pin_direction>
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	87 e0       	ldi	r24, 0x07	; 7
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
    
	sei();
 720:	78 94       	sei
	
	adc_init();
 722:	0e 94 b5 00 	call	0x16a	; 0x16a <adc_init>
	
	//Set channels default values
	CH1 = 0;
 726:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 72a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	CH2 = 0;
 72e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	CH3 = 0;
 732:	17 bc       	out	0x27, r1	; 39
	CH4 = 0;
 734:	18 bc       	out	0x28, r1	; 40

	//Setup timer 0, CH A and B for out 3 and 4
	TCCR0A = (0b10 << COM0A0) | (0b10 << COM0B0) | (0b01 << WGM00);
 736:	81 ea       	ldi	r24, 0xA1	; 161
 738:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0b0 << WGM02) | (0b1 << CS10);
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	85 bd       	out	0x25, r24	; 37
	
	//Setup timer 1, CH B for out 1
	TCCR1A = (0b10 << COM1B0) | (0b01 << WGM00);
 73e:	91 e2       	ldi	r25, 0x21	; 33
 740:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (0b0 << WGM02) | (0b1 << CS10);
 744:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//Setup timer 2, CH A for out 2
	TCCR2A = (0b10 << COM2A0) | (0b01 << WGM00);
 748:	91 e8       	ldi	r25, 0x81	; 129
 74a:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (0b0 << WGM02) | (0b1 << CS10);
 74e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

    while (1) 
    {
		ntc1Celsius = getNTC(NTC1);
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	0e 94 65 01 	call	0x2ca	; 0x2ca <getNTC>
 758:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <ntc1Celsius+0x1>
 75c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <ntc1Celsius>
		inputVoltage = get_mVolt(VOLTMONITOR1);
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <get_mVolt>
 766:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <inputVoltage+0x1>
 76a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <inputVoltage>
		outputCurrent = get_mAmps(CURRMONITOR);
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	0e 94 fd 00 	call	0x1fa	; 0x1fa <get_mAmps>
 774:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <outputCurrent+0x1>
 778:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <outputCurrent>
		
		
		if (inputVoltage <= CRITICALVOLTAGE){
 77c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <inputVoltage>
 780:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <inputVoltage+0x1>
 784:	85 30       	cpi	r24, 0x05	; 5
 786:	29 e2       	ldi	r18, 0x29	; 41
 788:	92 07       	cpc	r25, r18
 78a:	18 f4       	brcc	.+6      	; 0x792 <main+0x10a>
			protectionFlg = 1;
 78c:	21 e0       	ldi	r18, 0x01	; 1
 78e:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <protectionFlg>
		}
		if (inputVoltage >= WORKRESTOREVOLTAGE){
 792:	88 3f       	cpi	r24, 0xF8	; 248
 794:	9a 42       	sbci	r25, 0x2A	; 42
 796:	10 f0       	brcs	.+4      	; 0x79c <main+0x114>
			protectionFlg = 0;
 798:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <protectionFlg>
		}
		
		if(protectionFlg != 0){
 79c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <protectionFlg>
 7a0:	88 23       	and	r24, r24
 7a2:	a9 f0       	breq	.+42     	; 0x7ce <main+0x146>
			gpio_set_pin_level(&drvEn, true);
 7a4:	61 e0       	ldi	r22, 0x01	; 1
 7a6:	89 e1       	ldi	r24, 0x19	; 25
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
			gpio_toggle_pin_level(&ledFail);
 7ae:	83 e1       	ldi	r24, 0x13	; 19
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <gpio_toggle_pin_level>
			
			lightLevel=0;
 7b6:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <lightLevel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	94 e3       	ldi	r25, 0x34	; 52
 7be:	2c e0       	ldi	r18, 0x0C	; 12
 7c0:	81 50       	subi	r24, 0x01	; 1
 7c2:	90 40       	sbci	r25, 0x00	; 0
 7c4:	20 40       	sbci	r18, 0x00	; 0
 7c6:	e1 f7       	brne	.-8      	; 0x7c0 <main+0x138>
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <main+0x142>
 7ca:	00 00       	nop
 7cc:	c2 cf       	rjmp	.-124    	; 0x752 <main+0xca>
			_delay_ms(250);
		}else{
			gpio_set_pin_level(&drvEn, false);
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	89 e1       	ldi	r24, 0x19	; 25
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
			gpio_set_pin_level(&ledFail, false);
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	83 e1       	ldi	r24, 0x13	; 19
 7dc:	91 e0       	ldi	r25, 0x01	; 1
 7de:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <gpio_set_pin_level>
			
			if(lightLevel < LIGHTTARGETLEVEL){
 7e2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <lightLevel>
 7e6:	8f 3f       	cpi	r24, 0xFF	; 255
 7e8:	61 f0       	breq	.+24     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
				lightLevel++;
 7ea:	8f 5f       	subi	r24, 0xFF	; 255
 7ec:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <lightLevel>
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	99 ef       	ldi	r25, 0xF9	; 249
 7f4:	20 e0       	ldi	r18, 0x00	; 0
 7f6:	81 50       	subi	r24, 0x01	; 1
 7f8:	90 40       	sbci	r25, 0x00	; 0
 7fa:	20 40       	sbci	r18, 0x00	; 0
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <main+0x16e>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
 800:	00 00       	nop
				_delay_ms(INCRSTEPTIME);
			}
			CH1 = lightLevel;
 802:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <lightLevel>
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 80c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			CH2 = lightLevel;
 810:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <lightLevel>
 814:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			CH3 = lightLevel;
 818:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <lightLevel>
 81c:	87 bd       	out	0x27, r24	; 39
			CH4 = lightLevel;
 81e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <lightLevel>
 822:	88 bd       	out	0x28, r24	; 40
 824:	96 cf       	rjmp	.-212    	; 0x752 <main+0xca>

00000826 <__subsf3>:
 826:	50 58       	subi	r21, 0x80	; 128

00000828 <__addsf3>:
 828:	bb 27       	eor	r27, r27
 82a:	aa 27       	eor	r26, r26
 82c:	0e 94 2b 04 	call	0x856	; 0x856 <__addsf3x>
 830:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_round>
 834:	0e 94 6e 05 	call	0xadc	; 0xadc <__fp_pscA>
 838:	38 f0       	brcs	.+14     	; 0x848 <__addsf3+0x20>
 83a:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscB>
 83e:	20 f0       	brcs	.+8      	; 0x848 <__addsf3+0x20>
 840:	39 f4       	brne	.+14     	; 0x850 <__addsf3+0x28>
 842:	9f 3f       	cpi	r25, 0xFF	; 255
 844:	19 f4       	brne	.+6      	; 0x84c <__addsf3+0x24>
 846:	26 f4       	brtc	.+8      	; 0x850 <__addsf3+0x28>
 848:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_nan>
 84c:	0e f4       	brtc	.+2      	; 0x850 <__addsf3+0x28>
 84e:	e0 95       	com	r30
 850:	e7 fb       	bst	r30, 7
 852:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_inf>

00000856 <__addsf3x>:
 856:	e9 2f       	mov	r30, r25
 858:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_split3>
 85c:	58 f3       	brcs	.-42     	; 0x834 <__addsf3+0xc>
 85e:	ba 17       	cp	r27, r26
 860:	62 07       	cpc	r22, r18
 862:	73 07       	cpc	r23, r19
 864:	84 07       	cpc	r24, r20
 866:	95 07       	cpc	r25, r21
 868:	20 f0       	brcs	.+8      	; 0x872 <__addsf3x+0x1c>
 86a:	79 f4       	brne	.+30     	; 0x88a <__addsf3x+0x34>
 86c:	a6 f5       	brtc	.+104    	; 0x8d6 <__addsf3x+0x80>
 86e:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_zero>
 872:	0e f4       	brtc	.+2      	; 0x876 <__addsf3x+0x20>
 874:	e0 95       	com	r30
 876:	0b 2e       	mov	r0, r27
 878:	ba 2f       	mov	r27, r26
 87a:	a0 2d       	mov	r26, r0
 87c:	0b 01       	movw	r0, r22
 87e:	b9 01       	movw	r22, r18
 880:	90 01       	movw	r18, r0
 882:	0c 01       	movw	r0, r24
 884:	ca 01       	movw	r24, r20
 886:	a0 01       	movw	r20, r0
 888:	11 24       	eor	r1, r1
 88a:	ff 27       	eor	r31, r31
 88c:	59 1b       	sub	r21, r25
 88e:	99 f0       	breq	.+38     	; 0x8b6 <__addsf3x+0x60>
 890:	59 3f       	cpi	r21, 0xF9	; 249
 892:	50 f4       	brcc	.+20     	; 0x8a8 <__addsf3x+0x52>
 894:	50 3e       	cpi	r21, 0xE0	; 224
 896:	68 f1       	brcs	.+90     	; 0x8f2 <__addsf3x+0x9c>
 898:	1a 16       	cp	r1, r26
 89a:	f0 40       	sbci	r31, 0x00	; 0
 89c:	a2 2f       	mov	r26, r18
 89e:	23 2f       	mov	r18, r19
 8a0:	34 2f       	mov	r19, r20
 8a2:	44 27       	eor	r20, r20
 8a4:	58 5f       	subi	r21, 0xF8	; 248
 8a6:	f3 cf       	rjmp	.-26     	; 0x88e <__addsf3x+0x38>
 8a8:	46 95       	lsr	r20
 8aa:	37 95       	ror	r19
 8ac:	27 95       	ror	r18
 8ae:	a7 95       	ror	r26
 8b0:	f0 40       	sbci	r31, 0x00	; 0
 8b2:	53 95       	inc	r21
 8b4:	c9 f7       	brne	.-14     	; 0x8a8 <__addsf3x+0x52>
 8b6:	7e f4       	brtc	.+30     	; 0x8d6 <__addsf3x+0x80>
 8b8:	1f 16       	cp	r1, r31
 8ba:	ba 0b       	sbc	r27, r26
 8bc:	62 0b       	sbc	r22, r18
 8be:	73 0b       	sbc	r23, r19
 8c0:	84 0b       	sbc	r24, r20
 8c2:	ba f0       	brmi	.+46     	; 0x8f2 <__addsf3x+0x9c>
 8c4:	91 50       	subi	r25, 0x01	; 1
 8c6:	a1 f0       	breq	.+40     	; 0x8f0 <__addsf3x+0x9a>
 8c8:	ff 0f       	add	r31, r31
 8ca:	bb 1f       	adc	r27, r27
 8cc:	66 1f       	adc	r22, r22
 8ce:	77 1f       	adc	r23, r23
 8d0:	88 1f       	adc	r24, r24
 8d2:	c2 f7       	brpl	.-16     	; 0x8c4 <__addsf3x+0x6e>
 8d4:	0e c0       	rjmp	.+28     	; 0x8f2 <__addsf3x+0x9c>
 8d6:	ba 0f       	add	r27, r26
 8d8:	62 1f       	adc	r22, r18
 8da:	73 1f       	adc	r23, r19
 8dc:	84 1f       	adc	r24, r20
 8de:	48 f4       	brcc	.+18     	; 0x8f2 <__addsf3x+0x9c>
 8e0:	87 95       	ror	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	b7 95       	ror	r27
 8e8:	f7 95       	ror	r31
 8ea:	9e 3f       	cpi	r25, 0xFE	; 254
 8ec:	08 f0       	brcs	.+2      	; 0x8f0 <__addsf3x+0x9a>
 8ee:	b0 cf       	rjmp	.-160    	; 0x850 <__addsf3+0x28>
 8f0:	93 95       	inc	r25
 8f2:	88 0f       	add	r24, r24
 8f4:	08 f0       	brcs	.+2      	; 0x8f8 <__addsf3x+0xa2>
 8f6:	99 27       	eor	r25, r25
 8f8:	ee 0f       	add	r30, r30
 8fa:	97 95       	ror	r25
 8fc:	87 95       	ror	r24
 8fe:	08 95       	ret

00000900 <__divsf3>:
 900:	0e 94 94 04 	call	0x928	; 0x928 <__divsf3x>
 904:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_round>
 908:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscB>
 90c:	58 f0       	brcs	.+22     	; 0x924 <__divsf3+0x24>
 90e:	0e 94 6e 05 	call	0xadc	; 0xadc <__fp_pscA>
 912:	40 f0       	brcs	.+16     	; 0x924 <__divsf3+0x24>
 914:	29 f4       	brne	.+10     	; 0x920 <__divsf3+0x20>
 916:	5f 3f       	cpi	r21, 0xFF	; 255
 918:	29 f0       	breq	.+10     	; 0x924 <__divsf3+0x24>
 91a:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_inf>
 91e:	51 11       	cpse	r21, r1
 920:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_szero>
 924:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_nan>

00000928 <__divsf3x>:
 928:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_split3>
 92c:	68 f3       	brcs	.-38     	; 0x908 <__divsf3+0x8>

0000092e <__divsf3_pse>:
 92e:	99 23       	and	r25, r25
 930:	b1 f3       	breq	.-20     	; 0x91e <__divsf3+0x1e>
 932:	55 23       	and	r21, r21
 934:	91 f3       	breq	.-28     	; 0x91a <__divsf3+0x1a>
 936:	95 1b       	sub	r25, r21
 938:	55 0b       	sbc	r21, r21
 93a:	bb 27       	eor	r27, r27
 93c:	aa 27       	eor	r26, r26
 93e:	62 17       	cp	r22, r18
 940:	73 07       	cpc	r23, r19
 942:	84 07       	cpc	r24, r20
 944:	38 f0       	brcs	.+14     	; 0x954 <__divsf3_pse+0x26>
 946:	9f 5f       	subi	r25, 0xFF	; 255
 948:	5f 4f       	sbci	r21, 0xFF	; 255
 94a:	22 0f       	add	r18, r18
 94c:	33 1f       	adc	r19, r19
 94e:	44 1f       	adc	r20, r20
 950:	aa 1f       	adc	r26, r26
 952:	a9 f3       	breq	.-22     	; 0x93e <__divsf3_pse+0x10>
 954:	35 d0       	rcall	.+106    	; 0x9c0 <__divsf3_pse+0x92>
 956:	0e 2e       	mov	r0, r30
 958:	3a f0       	brmi	.+14     	; 0x968 <__divsf3_pse+0x3a>
 95a:	e0 e8       	ldi	r30, 0x80	; 128
 95c:	32 d0       	rcall	.+100    	; 0x9c2 <__divsf3_pse+0x94>
 95e:	91 50       	subi	r25, 0x01	; 1
 960:	50 40       	sbci	r21, 0x00	; 0
 962:	e6 95       	lsr	r30
 964:	00 1c       	adc	r0, r0
 966:	ca f7       	brpl	.-14     	; 0x95a <__divsf3_pse+0x2c>
 968:	2b d0       	rcall	.+86     	; 0x9c0 <__divsf3_pse+0x92>
 96a:	fe 2f       	mov	r31, r30
 96c:	29 d0       	rcall	.+82     	; 0x9c0 <__divsf3_pse+0x92>
 96e:	66 0f       	add	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	bb 1f       	adc	r27, r27
 976:	26 17       	cp	r18, r22
 978:	37 07       	cpc	r19, r23
 97a:	48 07       	cpc	r20, r24
 97c:	ab 07       	cpc	r26, r27
 97e:	b0 e8       	ldi	r27, 0x80	; 128
 980:	09 f0       	breq	.+2      	; 0x984 <__divsf3_pse+0x56>
 982:	bb 0b       	sbc	r27, r27
 984:	80 2d       	mov	r24, r0
 986:	bf 01       	movw	r22, r30
 988:	ff 27       	eor	r31, r31
 98a:	93 58       	subi	r25, 0x83	; 131
 98c:	5f 4f       	sbci	r21, 0xFF	; 255
 98e:	3a f0       	brmi	.+14     	; 0x99e <__divsf3_pse+0x70>
 990:	9e 3f       	cpi	r25, 0xFE	; 254
 992:	51 05       	cpc	r21, r1
 994:	78 f0       	brcs	.+30     	; 0x9b4 <__divsf3_pse+0x86>
 996:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_inf>
 99a:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_szero>
 99e:	5f 3f       	cpi	r21, 0xFF	; 255
 9a0:	e4 f3       	brlt	.-8      	; 0x99a <__divsf3_pse+0x6c>
 9a2:	98 3e       	cpi	r25, 0xE8	; 232
 9a4:	d4 f3       	brlt	.-12     	; 0x99a <__divsf3_pse+0x6c>
 9a6:	86 95       	lsr	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b7 95       	ror	r27
 9ae:	f7 95       	ror	r31
 9b0:	9f 5f       	subi	r25, 0xFF	; 255
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__divsf3_pse+0x78>
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret
 9c0:	e1 e0       	ldi	r30, 0x01	; 1
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	bb 1f       	adc	r27, r27
 9ca:	62 17       	cp	r22, r18
 9cc:	73 07       	cpc	r23, r19
 9ce:	84 07       	cpc	r24, r20
 9d0:	ba 07       	cpc	r27, r26
 9d2:	20 f0       	brcs	.+8      	; 0x9dc <__divsf3_pse+0xae>
 9d4:	62 1b       	sub	r22, r18
 9d6:	73 0b       	sbc	r23, r19
 9d8:	84 0b       	sbc	r24, r20
 9da:	ba 0b       	sbc	r27, r26
 9dc:	ee 1f       	adc	r30, r30
 9de:	88 f7       	brcc	.-30     	; 0x9c2 <__divsf3_pse+0x94>
 9e0:	e0 95       	com	r30
 9e2:	08 95       	ret

000009e4 <__fixsfsi>:
 9e4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 9e8:	68 94       	set
 9ea:	b1 11       	cpse	r27, r1
 9ec:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_szero>
 9f0:	08 95       	ret

000009f2 <__fixunssfsi>:
 9f2:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_splitA>
 9f6:	88 f0       	brcs	.+34     	; 0xa1a <__fixunssfsi+0x28>
 9f8:	9f 57       	subi	r25, 0x7F	; 127
 9fa:	98 f0       	brcs	.+38     	; 0xa22 <__fixunssfsi+0x30>
 9fc:	b9 2f       	mov	r27, r25
 9fe:	99 27       	eor	r25, r25
 a00:	b7 51       	subi	r27, 0x17	; 23
 a02:	b0 f0       	brcs	.+44     	; 0xa30 <__fixunssfsi+0x3e>
 a04:	e1 f0       	breq	.+56     	; 0xa3e <__fixunssfsi+0x4c>
 a06:	66 0f       	add	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	1a f0       	brmi	.+6      	; 0xa16 <__fixunssfsi+0x24>
 a10:	ba 95       	dec	r27
 a12:	c9 f7       	brne	.-14     	; 0xa06 <__fixunssfsi+0x14>
 a14:	14 c0       	rjmp	.+40     	; 0xa3e <__fixunssfsi+0x4c>
 a16:	b1 30       	cpi	r27, 0x01	; 1
 a18:	91 f0       	breq	.+36     	; 0xa3e <__fixunssfsi+0x4c>
 a1a:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fp_zero>
 a1e:	b1 e0       	ldi	r27, 0x01	; 1
 a20:	08 95       	ret
 a22:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_zero>
 a26:	67 2f       	mov	r22, r23
 a28:	78 2f       	mov	r23, r24
 a2a:	88 27       	eor	r24, r24
 a2c:	b8 5f       	subi	r27, 0xF8	; 248
 a2e:	39 f0       	breq	.+14     	; 0xa3e <__fixunssfsi+0x4c>
 a30:	b9 3f       	cpi	r27, 0xF9	; 249
 a32:	cc f3       	brlt	.-14     	; 0xa26 <__fixunssfsi+0x34>
 a34:	86 95       	lsr	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b3 95       	inc	r27
 a3c:	d9 f7       	brne	.-10     	; 0xa34 <__fixunssfsi+0x42>
 a3e:	3e f4       	brtc	.+14     	; 0xa4e <__fixunssfsi+0x5c>
 a40:	90 95       	com	r25
 a42:	80 95       	com	r24
 a44:	70 95       	com	r23
 a46:	61 95       	neg	r22
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	08 95       	ret

00000a50 <__floatunsisf>:
 a50:	e8 94       	clt
 a52:	09 c0       	rjmp	.+18     	; 0xa66 <__floatsisf+0x12>

00000a54 <__floatsisf>:
 a54:	97 fb       	bst	r25, 7
 a56:	3e f4       	brtc	.+14     	; 0xa66 <__floatsisf+0x12>
 a58:	90 95       	com	r25
 a5a:	80 95       	com	r24
 a5c:	70 95       	com	r23
 a5e:	61 95       	neg	r22
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	99 23       	and	r25, r25
 a68:	a9 f0       	breq	.+42     	; 0xa94 <__floatsisf+0x40>
 a6a:	f9 2f       	mov	r31, r25
 a6c:	96 e9       	ldi	r25, 0x96	; 150
 a6e:	bb 27       	eor	r27, r27
 a70:	93 95       	inc	r25
 a72:	f6 95       	lsr	r31
 a74:	87 95       	ror	r24
 a76:	77 95       	ror	r23
 a78:	67 95       	ror	r22
 a7a:	b7 95       	ror	r27
 a7c:	f1 11       	cpse	r31, r1
 a7e:	f8 cf       	rjmp	.-16     	; 0xa70 <__floatsisf+0x1c>
 a80:	fa f4       	brpl	.+62     	; 0xac0 <__floatsisf+0x6c>
 a82:	bb 0f       	add	r27, r27
 a84:	11 f4       	brne	.+4      	; 0xa8a <__floatsisf+0x36>
 a86:	60 ff       	sbrs	r22, 0
 a88:	1b c0       	rjmp	.+54     	; 0xac0 <__floatsisf+0x6c>
 a8a:	6f 5f       	subi	r22, 0xFF	; 255
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	16 c0       	rjmp	.+44     	; 0xac0 <__floatsisf+0x6c>
 a94:	88 23       	and	r24, r24
 a96:	11 f0       	breq	.+4      	; 0xa9c <__floatsisf+0x48>
 a98:	96 e9       	ldi	r25, 0x96	; 150
 a9a:	11 c0       	rjmp	.+34     	; 0xabe <__floatsisf+0x6a>
 a9c:	77 23       	and	r23, r23
 a9e:	21 f0       	breq	.+8      	; 0xaa8 <__floatsisf+0x54>
 aa0:	9e e8       	ldi	r25, 0x8E	; 142
 aa2:	87 2f       	mov	r24, r23
 aa4:	76 2f       	mov	r23, r22
 aa6:	05 c0       	rjmp	.+10     	; 0xab2 <__floatsisf+0x5e>
 aa8:	66 23       	and	r22, r22
 aaa:	71 f0       	breq	.+28     	; 0xac8 <__floatsisf+0x74>
 aac:	96 e8       	ldi	r25, 0x86	; 134
 aae:	86 2f       	mov	r24, r22
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	2a f0       	brmi	.+10     	; 0xac0 <__floatsisf+0x6c>
 ab6:	9a 95       	dec	r25
 ab8:	66 0f       	add	r22, r22
 aba:	77 1f       	adc	r23, r23
 abc:	88 1f       	adc	r24, r24
 abe:	da f7       	brpl	.-10     	; 0xab6 <__floatsisf+0x62>
 ac0:	88 0f       	add	r24, r24
 ac2:	96 95       	lsr	r25
 ac4:	87 95       	ror	r24
 ac6:	97 f9       	bld	r25, 7
 ac8:	08 95       	ret

00000aca <__fp_inf>:
 aca:	97 f9       	bld	r25, 7
 acc:	9f 67       	ori	r25, 0x7F	; 127
 ace:	80 e8       	ldi	r24, 0x80	; 128
 ad0:	70 e0       	ldi	r23, 0x00	; 0
 ad2:	60 e0       	ldi	r22, 0x00	; 0
 ad4:	08 95       	ret

00000ad6 <__fp_nan>:
 ad6:	9f ef       	ldi	r25, 0xFF	; 255
 ad8:	80 ec       	ldi	r24, 0xC0	; 192
 ada:	08 95       	ret

00000adc <__fp_pscA>:
 adc:	00 24       	eor	r0, r0
 ade:	0a 94       	dec	r0
 ae0:	16 16       	cp	r1, r22
 ae2:	17 06       	cpc	r1, r23
 ae4:	18 06       	cpc	r1, r24
 ae6:	09 06       	cpc	r0, r25
 ae8:	08 95       	ret

00000aea <__fp_pscB>:
 aea:	00 24       	eor	r0, r0
 aec:	0a 94       	dec	r0
 aee:	12 16       	cp	r1, r18
 af0:	13 06       	cpc	r1, r19
 af2:	14 06       	cpc	r1, r20
 af4:	05 06       	cpc	r0, r21
 af6:	08 95       	ret

00000af8 <__fp_round>:
 af8:	09 2e       	mov	r0, r25
 afa:	03 94       	inc	r0
 afc:	00 0c       	add	r0, r0
 afe:	11 f4       	brne	.+4      	; 0xb04 <__fp_round+0xc>
 b00:	88 23       	and	r24, r24
 b02:	52 f0       	brmi	.+20     	; 0xb18 <__fp_round+0x20>
 b04:	bb 0f       	add	r27, r27
 b06:	40 f4       	brcc	.+16     	; 0xb18 <__fp_round+0x20>
 b08:	bf 2b       	or	r27, r31
 b0a:	11 f4       	brne	.+4      	; 0xb10 <__fp_round+0x18>
 b0c:	60 ff       	sbrs	r22, 0
 b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__fp_round+0x20>
 b10:	6f 5f       	subi	r22, 0xFF	; 255
 b12:	7f 4f       	sbci	r23, 0xFF	; 255
 b14:	8f 4f       	sbci	r24, 0xFF	; 255
 b16:	9f 4f       	sbci	r25, 0xFF	; 255
 b18:	08 95       	ret

00000b1a <__fp_split3>:
 b1a:	57 fd       	sbrc	r21, 7
 b1c:	90 58       	subi	r25, 0x80	; 128
 b1e:	44 0f       	add	r20, r20
 b20:	55 1f       	adc	r21, r21
 b22:	59 f0       	breq	.+22     	; 0xb3a <__fp_splitA+0x10>
 b24:	5f 3f       	cpi	r21, 0xFF	; 255
 b26:	71 f0       	breq	.+28     	; 0xb44 <__fp_splitA+0x1a>
 b28:	47 95       	ror	r20

00000b2a <__fp_splitA>:
 b2a:	88 0f       	add	r24, r24
 b2c:	97 fb       	bst	r25, 7
 b2e:	99 1f       	adc	r25, r25
 b30:	61 f0       	breq	.+24     	; 0xb4a <__fp_splitA+0x20>
 b32:	9f 3f       	cpi	r25, 0xFF	; 255
 b34:	79 f0       	breq	.+30     	; 0xb54 <__fp_splitA+0x2a>
 b36:	87 95       	ror	r24
 b38:	08 95       	ret
 b3a:	12 16       	cp	r1, r18
 b3c:	13 06       	cpc	r1, r19
 b3e:	14 06       	cpc	r1, r20
 b40:	55 1f       	adc	r21, r21
 b42:	f2 cf       	rjmp	.-28     	; 0xb28 <__fp_split3+0xe>
 b44:	46 95       	lsr	r20
 b46:	f1 df       	rcall	.-30     	; 0xb2a <__fp_splitA>
 b48:	08 c0       	rjmp	.+16     	; 0xb5a <__fp_splitA+0x30>
 b4a:	16 16       	cp	r1, r22
 b4c:	17 06       	cpc	r1, r23
 b4e:	18 06       	cpc	r1, r24
 b50:	99 1f       	adc	r25, r25
 b52:	f1 cf       	rjmp	.-30     	; 0xb36 <__fp_splitA+0xc>
 b54:	86 95       	lsr	r24
 b56:	71 05       	cpc	r23, r1
 b58:	61 05       	cpc	r22, r1
 b5a:	08 94       	sec
 b5c:	08 95       	ret

00000b5e <__fp_zero>:
 b5e:	e8 94       	clt

00000b60 <__fp_szero>:
 b60:	bb 27       	eor	r27, r27
 b62:	66 27       	eor	r22, r22
 b64:	77 27       	eor	r23, r23
 b66:	cb 01       	movw	r24, r22
 b68:	97 f9       	bld	r25, 7
 b6a:	08 95       	ret
 b6c:	16 f0       	brts	.+4      	; 0xb72 <__fp_szero+0x12>
 b6e:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_mpack>
 b72:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_nan>
 b76:	68 94       	set
 b78:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_inf>

00000b7c <log>:
 b7c:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_splitA>
 b80:	a8 f3       	brcs	.-22     	; 0xb6c <__fp_szero+0xc>
 b82:	99 23       	and	r25, r25
 b84:	c1 f3       	breq	.-16     	; 0xb76 <__fp_szero+0x16>
 b86:	ae f3       	brts	.-22     	; 0xb72 <__fp_szero+0x12>
 b88:	df 93       	push	r29
 b8a:	cf 93       	push	r28
 b8c:	1f 93       	push	r17
 b8e:	0f 93       	push	r16
 b90:	ff 92       	push	r15
 b92:	c9 2f       	mov	r28, r25
 b94:	dd 27       	eor	r29, r29
 b96:	88 23       	and	r24, r24
 b98:	2a f0       	brmi	.+10     	; 0xba4 <log+0x28>
 b9a:	21 97       	sbiw	r28, 0x01	; 1
 b9c:	66 0f       	add	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	da f7       	brpl	.-10     	; 0xb9a <log+0x1e>
 ba4:	20 e0       	ldi	r18, 0x00	; 0
 ba6:	30 e0       	ldi	r19, 0x00	; 0
 ba8:	40 e8       	ldi	r20, 0x80	; 128
 baa:	5f eb       	ldi	r21, 0xBF	; 191
 bac:	9f e3       	ldi	r25, 0x3F	; 63
 bae:	88 39       	cpi	r24, 0x98	; 152
 bb0:	20 f0       	brcs	.+8      	; 0xbba <log+0x3e>
 bb2:	80 3e       	cpi	r24, 0xE0	; 224
 bb4:	38 f0       	brcs	.+14     	; 0xbc4 <log+0x48>
 bb6:	21 96       	adiw	r28, 0x01	; 1
 bb8:	8f 77       	andi	r24, 0x7F	; 127
 bba:	0e 94 14 04 	call	0x828	; 0x828 <__addsf3>
 bbe:	e4 eb       	ldi	r30, 0xB4	; 180
 bc0:	f0 e0       	ldi	r31, 0x00	; 0
 bc2:	04 c0       	rjmp	.+8      	; 0xbcc <log+0x50>
 bc4:	0e 94 14 04 	call	0x828	; 0x828 <__addsf3>
 bc8:	e1 ee       	ldi	r30, 0xE1	; 225
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_powser>
 bd0:	8b 01       	movw	r16, r22
 bd2:	be 01       	movw	r22, r28
 bd4:	ec 01       	movw	r28, r24
 bd6:	fb 2e       	mov	r15, r27
 bd8:	6f 57       	subi	r22, 0x7F	; 127
 bda:	71 09       	sbc	r23, r1
 bdc:	75 95       	asr	r23
 bde:	77 1f       	adc	r23, r23
 be0:	88 0b       	sbc	r24, r24
 be2:	99 0b       	sbc	r25, r25
 be4:	0e 94 2a 05 	call	0xa54	; 0xa54 <__floatsisf>
 be8:	28 e1       	ldi	r18, 0x18	; 24
 bea:	32 e7       	ldi	r19, 0x72	; 114
 bec:	41 e3       	ldi	r20, 0x31	; 49
 bee:	5f e3       	ldi	r21, 0x3F	; 63
 bf0:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3x>
 bf4:	af 2d       	mov	r26, r15
 bf6:	98 01       	movw	r18, r16
 bf8:	ae 01       	movw	r20, r28
 bfa:	ff 90       	pop	r15
 bfc:	0f 91       	pop	r16
 bfe:	1f 91       	pop	r17
 c00:	cf 91       	pop	r28
 c02:	df 91       	pop	r29
 c04:	0e 94 2b 04 	call	0x856	; 0x856 <__addsf3x>
 c08:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_round>

00000c0c <__mulsf3>:
 c0c:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3x>
 c10:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_round>
 c14:	0e 94 6e 05 	call	0xadc	; 0xadc <__fp_pscA>
 c18:	38 f0       	brcs	.+14     	; 0xc28 <__mulsf3+0x1c>
 c1a:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscB>
 c1e:	20 f0       	brcs	.+8      	; 0xc28 <__mulsf3+0x1c>
 c20:	95 23       	and	r25, r21
 c22:	11 f0       	breq	.+4      	; 0xc28 <__mulsf3+0x1c>
 c24:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_inf>
 c28:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_nan>
 c2c:	11 24       	eor	r1, r1
 c2e:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_szero>

00000c32 <__mulsf3x>:
 c32:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_split3>
 c36:	70 f3       	brcs	.-36     	; 0xc14 <__mulsf3+0x8>

00000c38 <__mulsf3_pse>:
 c38:	95 9f       	mul	r25, r21
 c3a:	c1 f3       	breq	.-16     	; 0xc2c <__mulsf3+0x20>
 c3c:	95 0f       	add	r25, r21
 c3e:	50 e0       	ldi	r21, 0x00	; 0
 c40:	55 1f       	adc	r21, r21
 c42:	62 9f       	mul	r22, r18
 c44:	f0 01       	movw	r30, r0
 c46:	72 9f       	mul	r23, r18
 c48:	bb 27       	eor	r27, r27
 c4a:	f0 0d       	add	r31, r0
 c4c:	b1 1d       	adc	r27, r1
 c4e:	63 9f       	mul	r22, r19
 c50:	aa 27       	eor	r26, r26
 c52:	f0 0d       	add	r31, r0
 c54:	b1 1d       	adc	r27, r1
 c56:	aa 1f       	adc	r26, r26
 c58:	64 9f       	mul	r22, r20
 c5a:	66 27       	eor	r22, r22
 c5c:	b0 0d       	add	r27, r0
 c5e:	a1 1d       	adc	r26, r1
 c60:	66 1f       	adc	r22, r22
 c62:	82 9f       	mul	r24, r18
 c64:	22 27       	eor	r18, r18
 c66:	b0 0d       	add	r27, r0
 c68:	a1 1d       	adc	r26, r1
 c6a:	62 1f       	adc	r22, r18
 c6c:	73 9f       	mul	r23, r19
 c6e:	b0 0d       	add	r27, r0
 c70:	a1 1d       	adc	r26, r1
 c72:	62 1f       	adc	r22, r18
 c74:	83 9f       	mul	r24, r19
 c76:	a0 0d       	add	r26, r0
 c78:	61 1d       	adc	r22, r1
 c7a:	22 1f       	adc	r18, r18
 c7c:	74 9f       	mul	r23, r20
 c7e:	33 27       	eor	r19, r19
 c80:	a0 0d       	add	r26, r0
 c82:	61 1d       	adc	r22, r1
 c84:	23 1f       	adc	r18, r19
 c86:	84 9f       	mul	r24, r20
 c88:	60 0d       	add	r22, r0
 c8a:	21 1d       	adc	r18, r1
 c8c:	82 2f       	mov	r24, r18
 c8e:	76 2f       	mov	r23, r22
 c90:	6a 2f       	mov	r22, r26
 c92:	11 24       	eor	r1, r1
 c94:	9f 57       	subi	r25, 0x7F	; 127
 c96:	50 40       	sbci	r21, 0x00	; 0
 c98:	9a f0       	brmi	.+38     	; 0xcc0 <__mulsf3_pse+0x88>
 c9a:	f1 f0       	breq	.+60     	; 0xcd8 <__mulsf3_pse+0xa0>
 c9c:	88 23       	and	r24, r24
 c9e:	4a f0       	brmi	.+18     	; 0xcb2 <__mulsf3_pse+0x7a>
 ca0:	ee 0f       	add	r30, r30
 ca2:	ff 1f       	adc	r31, r31
 ca4:	bb 1f       	adc	r27, r27
 ca6:	66 1f       	adc	r22, r22
 ca8:	77 1f       	adc	r23, r23
 caa:	88 1f       	adc	r24, r24
 cac:	91 50       	subi	r25, 0x01	; 1
 cae:	50 40       	sbci	r21, 0x00	; 0
 cb0:	a9 f7       	brne	.-22     	; 0xc9c <__mulsf3_pse+0x64>
 cb2:	9e 3f       	cpi	r25, 0xFE	; 254
 cb4:	51 05       	cpc	r21, r1
 cb6:	80 f0       	brcs	.+32     	; 0xcd8 <__mulsf3_pse+0xa0>
 cb8:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_inf>
 cbc:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_szero>
 cc0:	5f 3f       	cpi	r21, 0xFF	; 255
 cc2:	e4 f3       	brlt	.-8      	; 0xcbc <__mulsf3_pse+0x84>
 cc4:	98 3e       	cpi	r25, 0xE8	; 232
 cc6:	d4 f3       	brlt	.-12     	; 0xcbc <__mulsf3_pse+0x84>
 cc8:	86 95       	lsr	r24
 cca:	77 95       	ror	r23
 ccc:	67 95       	ror	r22
 cce:	b7 95       	ror	r27
 cd0:	f7 95       	ror	r31
 cd2:	e7 95       	ror	r30
 cd4:	9f 5f       	subi	r25, 0xFF	; 255
 cd6:	c1 f7       	brne	.-16     	; 0xcc8 <__mulsf3_pse+0x90>
 cd8:	fe 2b       	or	r31, r30
 cda:	88 0f       	add	r24, r24
 cdc:	91 1d       	adc	r25, r1
 cde:	96 95       	lsr	r25
 ce0:	87 95       	ror	r24
 ce2:	97 f9       	bld	r25, 7
 ce4:	08 95       	ret

00000ce6 <__fp_mpack>:
 ce6:	9f 3f       	cpi	r25, 0xFF	; 255
 ce8:	31 f0       	breq	.+12     	; 0xcf6 <__fp_mpack_finite+0xc>

00000cea <__fp_mpack_finite>:
 cea:	91 50       	subi	r25, 0x01	; 1
 cec:	20 f4       	brcc	.+8      	; 0xcf6 <__fp_mpack_finite+0xc>
 cee:	87 95       	ror	r24
 cf0:	77 95       	ror	r23
 cf2:	67 95       	ror	r22
 cf4:	b7 95       	ror	r27
 cf6:	88 0f       	add	r24, r24
 cf8:	91 1d       	adc	r25, r1
 cfa:	96 95       	lsr	r25
 cfc:	87 95       	ror	r24
 cfe:	97 f9       	bld	r25, 7
 d00:	08 95       	ret

00000d02 <__fp_powser>:
 d02:	df 93       	push	r29
 d04:	cf 93       	push	r28
 d06:	1f 93       	push	r17
 d08:	0f 93       	push	r16
 d0a:	ff 92       	push	r15
 d0c:	ef 92       	push	r14
 d0e:	df 92       	push	r13
 d10:	7b 01       	movw	r14, r22
 d12:	8c 01       	movw	r16, r24
 d14:	68 94       	set
 d16:	06 c0       	rjmp	.+12     	; 0xd24 <__fp_powser+0x22>
 d18:	da 2e       	mov	r13, r26
 d1a:	ef 01       	movw	r28, r30
 d1c:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3x>
 d20:	fe 01       	movw	r30, r28
 d22:	e8 94       	clt
 d24:	a5 91       	lpm	r26, Z+
 d26:	25 91       	lpm	r18, Z+
 d28:	35 91       	lpm	r19, Z+
 d2a:	45 91       	lpm	r20, Z+
 d2c:	55 91       	lpm	r21, Z+
 d2e:	a6 f3       	brts	.-24     	; 0xd18 <__fp_powser+0x16>
 d30:	ef 01       	movw	r28, r30
 d32:	0e 94 2b 04 	call	0x856	; 0x856 <__addsf3x>
 d36:	fe 01       	movw	r30, r28
 d38:	97 01       	movw	r18, r14
 d3a:	a8 01       	movw	r20, r16
 d3c:	da 94       	dec	r13
 d3e:	69 f7       	brne	.-38     	; 0xd1a <__fp_powser+0x18>
 d40:	df 90       	pop	r13
 d42:	ef 90       	pop	r14
 d44:	ff 90       	pop	r15
 d46:	0f 91       	pop	r16
 d48:	1f 91       	pop	r17
 d4a:	cf 91       	pop	r28
 d4c:	df 91       	pop	r29
 d4e:	08 95       	ret

00000d50 <__udivmodsi4>:
 d50:	a1 e2       	ldi	r26, 0x21	; 33
 d52:	1a 2e       	mov	r1, r26
 d54:	aa 1b       	sub	r26, r26
 d56:	bb 1b       	sub	r27, r27
 d58:	fd 01       	movw	r30, r26
 d5a:	0d c0       	rjmp	.+26     	; 0xd76 <__udivmodsi4_ep>

00000d5c <__udivmodsi4_loop>:
 d5c:	aa 1f       	adc	r26, r26
 d5e:	bb 1f       	adc	r27, r27
 d60:	ee 1f       	adc	r30, r30
 d62:	ff 1f       	adc	r31, r31
 d64:	a2 17       	cp	r26, r18
 d66:	b3 07       	cpc	r27, r19
 d68:	e4 07       	cpc	r30, r20
 d6a:	f5 07       	cpc	r31, r21
 d6c:	20 f0       	brcs	.+8      	; 0xd76 <__udivmodsi4_ep>
 d6e:	a2 1b       	sub	r26, r18
 d70:	b3 0b       	sbc	r27, r19
 d72:	e4 0b       	sbc	r30, r20
 d74:	f5 0b       	sbc	r31, r21

00000d76 <__udivmodsi4_ep>:
 d76:	66 1f       	adc	r22, r22
 d78:	77 1f       	adc	r23, r23
 d7a:	88 1f       	adc	r24, r24
 d7c:	99 1f       	adc	r25, r25
 d7e:	1a 94       	dec	r1
 d80:	69 f7       	brne	.-38     	; 0xd5c <__udivmodsi4_loop>
 d82:	60 95       	com	r22
 d84:	70 95       	com	r23
 d86:	80 95       	com	r24
 d88:	90 95       	com	r25
 d8a:	9b 01       	movw	r18, r22
 d8c:	ac 01       	movw	r20, r24
 d8e:	bd 01       	movw	r22, r26
 d90:	cf 01       	movw	r24, r30
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>
